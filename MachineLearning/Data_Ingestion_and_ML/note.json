{
  "paragraphs": [
    {
      "text": "import org.apache.commons.io.IOUtils\nimport java.net.URL\nimport java.nio.charset.Charset\nimport org.apache.spark.sql.SQLContext\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.ml.linalg.Vectors\nimport org.apache.spark.ml.linalg.DenseVector\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql.DataFrame\nimport spark.implicits._  \n\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql.Row\nimport org.apache.spark.ml.Pipeline                                                                                                     \nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}                                     \nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator                                                                 \nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer,VectorAssembler,StringIndexerModel,OneHotEncoder,StandardScaler}  ",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:40:23 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport org.apache.commons.io.IOUtils\n\nimport java.net.URL\n\nimport java.nio.charset.Charset\n\nimport org.apache.spark.sql.SQLContext\n\nimport org.apache.spark.ml.clustering.KMeans\n\nimport org.apache.spark.ml.linalg.Vectors\n\nimport org.apache.spark.ml.linalg.DenseVector\n\nimport org.apache.spark.rdd.RDD\n\nimport org.apache.spark.sql.DataFrame\n\nimport spark.implicits._\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.sql.Row\n\nimport org.apache.spark.ml.Pipeline\n\nimport org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\n\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\nimport org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer, VectorAssembler, StringIndexerModel, OneHotEncoder, StandardScaler}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491761473268_1506672209",
      "id": "20170409-141113_551136636",
      "dateCreated": "Apr 9, 2017 2:11:13 PM",
      "dateStarted": "Apr 16, 2017 11:40:23 PM",
      "dateFinished": "Apr 16, 2017 11:40:26 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\nval sqlContext \u003d new org.apache.spark.sql.SQLContext(sc)\nval file \u003d\"/Users/liushengchen/Google_Drive/Scala_group/Project/Data/allShotsData/allShotsData/201939.csv\"\nval shotData \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .load(file)\n\nshotData.registerTempTable(\"shot\")\n\nval df_raw \u003d shotData.select(\"_c0\",\"period\",\"minutes_remaining\",\"seconds_remaining\",\"action_type\",\"loc_x\", \"loc_y\",\"htm\",\"vtm\",\"shot_made_numeric\",\"shot_value\")\ndf_raw.show(1)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:03:21 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\nsqlContext: org.apache.spark.sql.SQLContext \u003d org.apache.spark.sql.SQLContext@1ddb435d\n\nfile: String \u003d /Users/liushengchen/Google_Drive/Scala_group/Project/Data/allShotsData/allShotsData/201939.csv\n\nshotData: org.apache.spark.sql.DataFrame \u003d [_c0: int, grid_type: string ... 25 more fields]\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n\ndf_raw: org.apache.spark.sql.DataFrame \u003d [_c0: int, period: int ... 9 more fields]\n+---+------+-----------------+-----------------+--------------------+-----+-----+---+---+-----------------+----------+\n|_c0|period|minutes_remaining|seconds_remaining|         action_type|loc_x|loc_y|htm|vtm|shot_made_numeric|shot_value|\n+---+------+-----------------+-----------------+--------------------+-----+-----+---+---+-----------------+----------+\n|  1|     1|               10|               56|Cutting Finger Ro...|  1.2| 8.35|GSW|NOP|                1|         2|\n+---+------+-----------------+-----------------+--------------------+-----+-----+---+---+-----------------+----------+\nonly showing top 1 row\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491411462895_-1740391558",
      "id": "20170405-125742_1623615776",
      "dateCreated": "Apr 5, 2017 12:57:42 PM",
      "dateStarted": "Apr 16, 2017 9:03:21 PM",
      "dateFinished": "Apr 16, 2017 9:03:29 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n# Query \"home team\" or \"visit team\"",
      "user": "anonymous",
      "dateUpdated": "Apr 10, 2017 4:13:13 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eQuery \u0026ldquo;home team\u0026rdquo; or \u0026ldquo;visit team\u0026rdquo;\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491855145911_-924479232",
      "id": "20170410-161225_596391994",
      "dateCreated": "Apr 10, 2017 4:12:25 PM",
      "dateStarted": "Apr 10, 2017 4:13:13 PM",
      "dateFinished": "Apr 10, 2017 4:13:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val data_select_h \u003d df_raw.withColumn(\"h\", when(col(\"htm\").equalTo(\"GSW\"),1).otherwise(0 ))\nval data_select \u003ddata_select_h.withColumn(\"v\", when(col(\"vtm\").equalTo(\"GSW\"),1).otherwise(0 ))",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:03:43 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndata_select_h: org.apache.spark.sql.DataFrame \u003d [_c0: int, period: int ... 10 more fields]\n\ndata_select: org.apache.spark.sql.DataFrame \u003d [_c0: int, period: int ... 11 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491854445951_1065629259",
      "id": "20170410-160045_49639362",
      "dateCreated": "Apr 10, 2017 4:00:45 PM",
      "dateStarted": "Apr 16, 2017 9:03:43 PM",
      "dateFinished": "Apr 16, 2017 9:03:44 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": " data_select.show()",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:03:48 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+------+-----------------+-----------------+--------------------+-----+-----+---+---+-----------------+----------+---+---+\n|_c0|period|minutes_remaining|seconds_remaining|         action_type|loc_x|loc_y|htm|vtm|shot_made_numeric|shot_value|  h|  v|\n+---+------+-----------------+-----------------+--------------------+-----+-----+---+---+-----------------+----------+---+---+\n|  1|     1|               10|               56|Cutting Finger Ro...|  1.2| 8.35|GSW|NOP|                1|         2|  1|  0|\n|  2|     1|               10|               29|           Jump Shot|-17.6|24.75|GSW|NOP|                0|         3|  1|  0|\n|  3|     1|                9|               34|          Layup Shot|  2.0| 6.15|GSW|NOP|                0|         2|  1|  0|\n|  4|     1|                9|               13|           Jump Shot|-19.7|24.55|GSW|NOP|                1|         3|  1|  0|\n|  5|     1|                7|               11|  Running Layup Shot| -0.4| 6.05|GSW|NOP|                1|         2|  1|  0|\n|  6|     1|                6|               45|           Jump Shot| -1.1|31.15|GSW|NOP|                1|         3|  1|  0|\n|  7|     1|                5|               50|           Jump Shot|-11.7|24.05|GSW|NOP|                1|         2|  1|  0|\n|  8|     1|                5|                3|           Jump Shot|-17.9|28.05|GSW|NOP|                1|         3|  1|  0|\n|  9|     1|                3|               57| Step Back Jump shot|  8.9|29.15|GSW|NOP|                1|         3|  1|  0|\n| 10|     1|                3|                6|           Jump Shot|-15.6|28.45|GSW|NOP|                0|         3|  1|  0|\n| 11|     1|                2|               45|Driving Finger Ro...| -1.9| 7.35|GSW|NOP|                1|         2|  1|  0|\n| 12|     1|                0|               45|  Driving Layup Shot|  1.2| 7.05|GSW|NOP|                1|         2|  1|  0|\n| 13|     1|                0|                1|           Jump Shot|-18.6|39.75|GSW|NOP|                0|         3|  1|  0|\n| 14|     2|                6|                3|           Jump Shot| 16.4|23.75|GSW|NOP|                0|         3|  1|  0|\n| 15|     2|                4|               54|  Fadeaway Bank shot| -9.6|13.75|GSW|NOP|                1|         2|  1|  0|\n| 16|     2|                2|               11|           Jump Shot| 16.6|22.65|GSW|NOP|                0|         3|  1|  0|\n| 17|     2|                1|               16|    Pullup Jump shot| 20.4|20.35|GSW|NOP|                0|         3|  1|  0|\n| 18|     2|                0|                0|Driving Finger Ro...| -0.9| 6.05|GSW|NOP|                1|         2|  1|  0|\n| 19|     3|               10|                7|Driving Finger Ro...|  1.0| 6.35|GSW|NOP|                1|         2|  1|  0|\n| 20|     3|                7|               35|Cutting Finger Ro...| -0.7| 6.55|GSW|NOP|                1|         2|  1|  0|\n+---+------+-----------------+-----------------+--------------------+-----+-----+---+---+-----------------+----------+---+---+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492300910177_-1235702681",
      "id": "20170415-200150_1302036077",
      "dateCreated": "Apr 15, 2017 8:01:50 PM",
      "dateStarted": "Apr 16, 2017 9:03:49 PM",
      "dateFinished": "Apr 16, 2017 9:03:49 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## k-means of loc_x, loc_y\n",
      "user": "anonymous",
      "dateUpdated": "Apr 9, 2017 10:55:21 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ek-means of loc_x, loc_y\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491411533133_-855561033",
      "id": "20170405-125853_720972166",
      "dateCreated": "Apr 5, 2017 12:58:53 PM",
      "dateStarted": "Apr 9, 2017 10:55:22 PM",
      "dateFinished": "Apr 9, 2017 10:55:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Combine \"loc_x\" and \"loc_y\" into \"feature_xy\"",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:50:04 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eCombine \u0026ldquo;loc_x\u0026rdquo; and \u0026ldquo;loc_y\u0026rdquo; into \u0026ldquo;feature_xy\u0026rdquo;\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492393749799_-1487307672",
      "id": "20170416-214909_2132913880",
      "dateCreated": "Apr 16, 2017 9:49:09 PM",
      "dateStarted": "Apr 16, 2017 9:50:04 PM",
      "dateFinished": "Apr 16, 2017 9:50:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val assembler \u003d new VectorAssembler()\n  .setInputCols(Array(\"loc_x\", \"loc_y\"))\n  .setOutputCol(\"feature_xy\")\nval data_assembled \u003d assembler.transform(data_select)\nval data_featurexy\u003d data_assembled.select(\"feature_xy\", \"shot_made_numeric\",\"period\",\"action_type\",\"h\",\"v\")\n\ndata_featurexy.show(1)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:51:13 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nassembler: org.apache.spark.ml.feature.VectorAssembler \u003d vecAssembler_b690f21a86c5\n\ndata_assembled: org.apache.spark.sql.DataFrame \u003d [_c0: int, period: int ... 12 more fields]\n\ndata_featurexy: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 4 more fields]\n+----------+-----------------+------+--------------------+---+---+\n|feature_xy|shot_made_numeric|period|         action_type|  h|  v|\n+----------+-----------------+------+--------------------+---+---+\n|[1.2,8.35]|                1|     1|Cutting Finger Ro...|  1|  0|\n+----------+-----------------+------+--------------------+---+---+\nonly showing top 1 row\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491411069973_1099705518",
      "id": "20170405-125109_128458281",
      "dateCreated": "Apr 5, 2017 12:51:09 PM",
      "dateStarted": "Apr 16, 2017 9:51:13 PM",
      "dateFinished": "Apr 16, 2017 9:51:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Compute Cost function to find the optimal k values\n",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:30:55 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCompute Cost function to find the optimal k values\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491785497365_2095592860",
      "id": "20170409-205137_1948048274",
      "dateCreated": "Apr 9, 2017 8:51:37 PM",
      "dateStarted": "Apr 16, 2017 9:30:55 PM",
      "dateFinished": "Apr 16, 2017 9:30:56 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "var kresults \u003d Map(0 -\u003e 0d)\n(10 until 40).foreach(i \u003d\u003e {\n  val kmeans \u003d new KMeans()\n  .setK(i)                              // set number of clusters\n  .setFeaturesCol(\"feature_xy\")\n  .setPredictionCol(\"prediction\")\n  val model \u003d kmeans.fit(data_featurexy)\n\n  println(i)\n  val cost \u003d model.computeCost(data_featurexy)\n  println(cost)\n \n  \n  kresults +\u003d (i -\u003e cost)\n})",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:51:35 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nkresults: scala.collection.immutable.Map[Int,Double] \u003d Map(0 -\u003e 0.0)\n10\n30046.199816350312\n11\n29189.796154992175\n12\n22877.161190926185\n13\n24761.974940615935\n14\n19591.52546623438\n15\n19234.662522767572\n16\n17542.965526123335\n17\n15782.561662773744\n18\n15531.871413128572\n19\n13553.731482226001\n20\n13484.469700387504\n21\n13022.427201951265\n22\n12927.951758792156\n23\n12662.990925458818\n24\n10986.406347662478\n25\n11625.873737983376\n26\n9680.678427260973\n27\n9906.579136562732\n28\n9510.807896838578\n29\n8577.751921104928\n30\n8330.90369098236\n31\n8137.278167496788\n32\n8006.699148337029\n33\n7580.6727126206915\n34\n7479.837198097249\n35\n7109.430715985369\n36\n7159.083364916545\n37\n6623.637346964649\n38\n6584.093954678444\n39\n6446.634136170976\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491763289436_-305057058",
      "id": "20170409-144129_1358035335",
      "dateCreated": "Apr 9, 2017 2:41:29 PM",
      "dateStarted": "Apr 16, 2017 9:51:35 PM",
      "dateFinished": "Apr 16, 2017 9:52:05 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Trains a k-means model\nval k_num \u003d 20\nval kmeans \u003d new KMeans()\n  .setK(k_num)                              // set number of clusters\n  .setFeaturesCol(\"feature_xy\")\n  .setPredictionCol(\"shot_zone\")\nval model \u003d kmeans.fit(data_featurexy)\n\nval transformed \u003d model.transform(data_featurexy)\ntransformed.show(5)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:52:29 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nk_num: Int \u003d 20\n\nkmeans: org.apache.spark.ml.clustering.KMeans \u003d kmeans_255700be3b43\n\nmodel: org.apache.spark.ml.clustering.KMeansModel \u003d kmeans_255700be3b43\n\ntransformed: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 5 more fields]\n+-------------+-----------------+------+--------------------+---+---+---------+\n|   feature_xy|shot_made_numeric|period|         action_type|  h|  v|shot_zone|\n+-------------+-----------------+------+--------------------+---+---+---------+\n|   [1.2,8.35]|                1|     1|Cutting Finger Ro...|  1|  0|       14|\n|[-17.6,24.75]|                0|     1|           Jump Shot|  1|  0|       11|\n|   [2.0,6.15]|                0|     1|          Layup Shot|  1|  0|       14|\n|[-19.7,24.55]|                1|     1|           Jump Shot|  1|  0|       12|\n|  [-0.4,6.05]|                1|     1|  Running Layup Shot|  1|  0|        0|\n+-------------+-----------------+------+--------------------+---+---+---------+\nonly showing top 5 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491411412425_-882462808",
      "id": "20170405-125652_1531962347",
      "dateCreated": "Apr 5, 2017 12:56:52 PM",
      "dateStarted": "Apr 16, 2017 9:52:29 PM",
      "dateFinished": "Apr 16, 2017 9:52:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Dealing with categorical values\n### StringIndexer helps you convert String categorical values into integer indexes of those values.",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:52:47 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDealing with categorical values\u003c/h2\u003e\n\u003ch3\u003eStringIndexer helps you convert String categorical values into integer indexes of those values.\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491839214283_-700578542",
      "id": "20170410-114654_1635507070",
      "dateCreated": "Apr 10, 2017 11:46:54 AM",
      "dateStarted": "Apr 16, 2017 9:52:47 PM",
      "dateFinished": "Apr 16, 2017 9:52:47 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 1. Action type",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 7:56:21 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e1. Action type\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492386957506_401341554",
      "id": "20170416-195557_201431123",
      "dateCreated": "Apr 16, 2017 7:55:57 PM",
      "dateStarted": "Apr 16, 2017 7:56:21 PM",
      "dateFinished": "Apr 16, 2017 7:56:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// shows distinct \"action types\"\nval distinctValuesDF \u003d transformed.select(transformed(\"action_type\")).distinct\nval distinctValuesArray \u003d distinctValuesDF.select(\"action_type\").rdd.map(r \u003d\u003e r(0).asInstanceOf[String]).collect()",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:54:39 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndistinctValuesDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [action_type: string]\ndistinctValuesArray: Array[String] \u003d Array(Putback Layup Shot, Finger Roll Layup Shot, Running Pull-Up Jump Shot, Turnaround Fadeaway shot, Driving Reverse Layup Shot, Driving Floating Jump Shot, Pullup Jump shot, Running Layup Shot, Running Jump Shot, Driving Floating Bank Jump Shot, Driving Finger Roll Layup Shot, Turnaround Fadeaway Bank Jump Shot, Driving Hook Shot, Turnaround Jump Shot, Step Back Bank Jump Shot, Turnaround Bank shot, Tip Layup Shot, Driving Layup Shot, Jump Bank Shot, Running Dunk Shot, Cutting Layup Shot, Jump Shot, Step Back Jump shot, Reverse Layup Shot, Pullup Bank shot, Driving Dunk Shot, Fadeaway Jump Shot, Fadeaway Bank shot, Driving Bank shot, Cutting Finger Roll Layup Shot, Alley Oop Layup shot, Running Reverse Layup Shot, Floating Jump shot, Layup Shot, R..."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491841748572_1213174522",
      "id": "20170410-122908_1619549423",
      "dateCreated": "Apr 10, 2017 12:29:08 PM",
      "dateStarted": "Apr 16, 2017 9:54:39 PM",
      "dateFinished": "Apr 16, 2017 9:54:40 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "def indexStringColumns(df:DataFrame, cols:Array[String]):DataFrame \u003d{\n    var newdf \u003d df\n    for (col \u003c- cols){\n        val si \u003d new StringIndexer().setInputCol(col).setOutputCol(col+ \"-num\") \n        val sm:StringIndexerModel \u003d si.fit(newdf)\n        newdf \u003d sm.transform(newdf).drop(col)\n        newdf \u003d newdf.withColumnRenamed(col+\"-num\",col)\n    }\n    newdf\n}\n\nval dfnumeric \u003d indexStringColumns(transformed, Array(\"action_type\"))\ndfnumeric.show(5)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:55:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nindexStringColumns: (df: org.apache.spark.sql.DataFrame, cols: Array[String])org.apache.spark.sql.DataFrame\n\ndfnumeric: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 5 more fields]\n+-------------+-----------------+------+---+---+---------+-----------+\n|   feature_xy|shot_made_numeric|period|  h|  v|shot_zone|action_type|\n+-------------+-----------------+------+---+---+---------+-----------+\n|   [1.2,8.35]|                1|     1|  1|  0|       14|       19.0|\n|[-17.6,24.75]|                0|     1|  1|  0|       11|        0.0|\n|   [2.0,6.15]|                0|     1|  1|  0|       14|        5.0|\n|[-19.7,24.55]|                1|     1|  1|  0|       12|        0.0|\n|  [-0.4,6.05]|                1|     1|  1|  0|        0|        7.0|\n+-------------+-----------------+------+---+---+---------+-----------+\nonly showing top 5 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491839299684_1777679424",
      "id": "20170410-114819_727615934",
      "dateCreated": "Apr 10, 2017 11:48:19 AM",
      "dateStarted": "Apr 16, 2017 9:55:16 PM",
      "dateFinished": "Apr 16, 2017 9:55:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Encoding the \"shot_zone\" with OneHotEncoder\ndef oneHotEncodeColumns(df:DataFrame, cols:Array[String]):DataFrame \u003d{\n   var newdf \u003d df\n   for (c\u003c-cols){\n       val onehotenc \u003d new OneHotEncoder().setInputCol(c).setOutputCol(\"action_type_onehot\").setDropLast(false)\n       newdf \u003donehotenc.transform(newdf)\n   }\n   newdf\n}\nval dfhot \u003d oneHotEncodeColumns(dfnumeric, Array(\"action_type\"))\ndfhot.show(2)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:35:35 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\noneHotEncodeColumns: (df: org.apache.spark.sql.DataFrame, cols: Array[String])org.apache.spark.sql.DataFrame\n\ndfhot: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 6 more fields]\n+-------------+-----------------+------+---+---+---------+-----------+------------------+\n|   feature_xy|shot_made_numeric|period|  h|  v|shot_zone|action_type|action_type_onehot|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+\n|   [1.2,8.35]|                1|     1|  1|  0|       14|       19.0|   (36,[19],[1.0])|\n|[-17.6,24.75]|                0|     1|  1|  0|       11|        0.0|    (36,[0],[1.0])|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491843323719_-1188403519",
      "id": "20170410-125523_333030934",
      "dateCreated": "Apr 10, 2017 12:55:23 PM",
      "dateStarted": "Apr 16, 2017 10:35:35 PM",
      "dateFinished": "Apr 16, 2017 10:35:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md \n## 2. period",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 8:01:47 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e2. period\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492387015928_-1700648957",
      "id": "20170416-195655_487288391",
      "dateCreated": "Apr 16, 2017 7:56:55 PM",
      "dateStarted": "Apr 16, 2017 8:01:47 PM",
      "dateFinished": "Apr 16, 2017 8:01:47 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Encoding the \"period\" with OneHotEncoder\ndef oneHotEncodeColumns_period(df:DataFrame, cols:Array[String]):DataFrame \u003d{\n   var newdf \u003d df\n   for (c\u003c-cols){\n       val onehotenc \u003d new OneHotEncoder().setInputCol(c).setOutputCol(\"period_onehot\").setDropLast(false)\n       newdf \u003donehotenc.transform(newdf)\n   }\n   newdf\n}\nval df_hot_period \u003d oneHotEncodeColumns_period(dfhot, Array(\"period\"))\ndf_hot_period.show(2)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:35:58 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\noneHotEncodeColumns_period: (df: org.apache.spark.sql.DataFrame, cols: Array[String])org.apache.spark.sql.DataFrame\n\ndf_hot_period: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 7 more fields]\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+\n|   feature_xy|shot_made_numeric|period|  h|  v|shot_zone|action_type|action_type_onehot|period_onehot|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+\n|   [1.2,8.35]|                1|     1|  1|  0|       14|       19.0|   (36,[19],[1.0])|(6,[1],[1.0])|\n|[-17.6,24.75]|                0|     1|  1|  0|       11|        0.0|    (36,[0],[1.0])|(6,[1],[1.0])|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492387360490_2047881311",
      "id": "20170416-200240_1613639320",
      "dateCreated": "Apr 16, 2017 8:02:40 PM",
      "dateStarted": "Apr 16, 2017 10:35:58 PM",
      "dateFinished": "Apr 16, 2017 10:35:59 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 3.shot_zone",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:36:53 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e3.shot_zone\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492392982047_-480135219",
      "id": "20170416-213622_1861204646",
      "dateCreated": "Apr 16, 2017 9:36:22 PM",
      "dateStarted": "Apr 16, 2017 9:36:53 PM",
      "dateFinished": "Apr 16, 2017 9:36:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Encoding the \"shot_zone\" with OneHotEncoder\ndef oneHotEncodeColumns_shotzone(df:DataFrame, cols:Array[String]):DataFrame \u003d{\n   var newdf \u003d df\n   for (c\u003c-cols){\n       val onehotenc \u003d new OneHotEncoder().setInputCol(c).setOutputCol(\"shot_zone_onehot\").setDropLast(false)\n       newdf \u003donehotenc.transform(newdf)\n   }\n   newdf\n}\nval df_hot_shotzone \u003d oneHotEncodeColumns_shotzone(df_hot_period, Array(\"shot_zone\"))\ndf_hot_shotzone.show(2)\n",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:36:05 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\noneHotEncodeColumns_shotzone: (df: org.apache.spark.sql.DataFrame, cols: Array[String])org.apache.spark.sql.DataFrame\n\ndf_hot_shotzone: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 8 more fields]\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+----------------+\n|   feature_xy|shot_made_numeric|period|  h|  v|shot_zone|action_type|action_type_onehot|period_onehot|shot_zone_onehot|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+----------------+\n|   [1.2,8.35]|                1|     1|  1|  0|       14|       19.0|   (36,[19],[1.0])|(6,[1],[1.0])| (20,[14],[1.0])|\n|[-17.6,24.75]|                0|     1|  1|  0|       11|        0.0|    (36,[0],[1.0])|(6,[1],[1.0])| (20,[11],[1.0])|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+----------------+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492393015048_-1218991025",
      "id": "20170416-213655_8598577",
      "dateCreated": "Apr 16, 2017 9:36:55 PM",
      "dateStarted": "Apr 16, 2017 10:36:06 PM",
      "dateFinished": "Apr 16, 2017 10:36:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# This part is only for visualizing the k-means result",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:31:42 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eThis part is only for visualizing the k-means result\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492392667468_11713438",
      "id": "20170416-213107_1747711767",
      "dateCreated": "Apr 16, 2017 9:31:07 PM",
      "dateStarted": "Apr 16, 2017 9:31:42 PM",
      "dateFinished": "Apr 16, 2017 9:31:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val vectorFirst \u003d udf{ x:DenseVector \u003d\u003e x(0) }\nval vectorSecond \u003d udf{ x:DenseVector \u003d\u003e x(1) }\nval df_1 \u003ddf_hot_shotzone.withColumn( \"x_loc\",vectorFirst(transformed(\"feature_xy\")))\nval df_2 \u003ddf_1.withColumn(\"y_loc\",vectorSecond(transformed(\"feature_xy\")))\n\nval assembler_1 \u003d new VectorAssembler()\n  .setInputCols(Array(\"shot_zone_onehot\",\"period_onehot\",\"h\",\"v\",\"action_type_onehot\"))\n  .setOutputCol(\"features\")\n\nval output_1 \u003d assembler_1.transform(df_2)\noutput_1.show(5)\n\n// register as a temptable\ndf_2.registerTempTable(\"df_2\")",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:47:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nvectorFirst: org.apache.spark.sql.expressions.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,DoubleType,Some(List(org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7)))\n\nvectorSecond: org.apache.spark.sql.expressions.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction1\u003e,DoubleType,Some(List(org.apache.spark.ml.linalg.VectorUDT@3bfc3ba7)))\n\ndf_1: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 9 more fields]\n\ndf_2: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 10 more fields]\n\nassembler_1: org.apache.spark.ml.feature.VectorAssembler \u003d vecAssembler_04bfc047db36\n\noutput_1: org.apache.spark.sql.DataFrame \u003d [feature_xy: vector, shot_made_numeric: int ... 11 more fields]\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+----------------+-----+-----+--------------------+\n|   feature_xy|shot_made_numeric|period|  h|  v|shot_zone|action_type|action_type_onehot|period_onehot|shot_zone_onehot|x_loc|y_loc|            features|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+----------------+-----+-----+--------------------+\n|   [1.2,8.35]|                1|     1|  1|  0|       14|       19.0|   (36,[19],[1.0])|(6,[1],[1.0])| (20,[14],[1.0])|  1.2| 8.35|(64,[14,21,26,47]...|\n|[-17.6,24.75]|                0|     1|  1|  0|       11|        0.0|    (36,[0],[1.0])|(6,[1],[1.0])| (20,[11],[1.0])|-17.6|24.75|(64,[11,21,26,28]...|\n|   [2.0,6.15]|                0|     1|  1|  0|       14|        5.0|    (36,[5],[1.0])|(6,[1],[1.0])| (20,[14],[1.0])|  2.0| 6.15|(64,[14,21,26,33]...|\n|[-19.7,24.55]|                1|     1|  1|  0|       12|        0.0|    (36,[0],[1.0])|(6,[1],[1.0])| (20,[12],[1.0])|-19.7|24.55|(64,[12,21,26,28]...|\n|  [-0.4,6.05]|                1|     1|  1|  0|        0|        7.0|    (36,[7],[1.0])|(6,[1],[1.0])|  (20,[0],[1.0])| -0.4| 6.05|(64,[0,21,26,35],...|\n+-------------+-----------------+------+---+---+---------+-----------+------------------+-------------+----------------+-----+-----+--------------------+\nonly showing top 5 rows\n\n\nwarning: there was one deprecation warning; re-run with -deprecation for details\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491782576481_-1000612879",
      "id": "20170409-200256_817670388",
      "dateCreated": "Apr 9, 2017 8:02:56 PM",
      "dateStarted": "Apr 16, 2017 10:47:16 PM",
      "dateFinished": "Apr 16, 2017 10:47:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql \nSELECT * FROM df_2",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 9:34:44 PM",
      "config": {
        "colWidth": 8.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "scatterChart",
              "height": 300.0,
              "optionOpen": true,
              "setting": {
                "scatterChart": {
                  "xAxis": {
                    "name": "x_loc",
                    "index": 7.0,
                    "aggr": "sum"
                  },
                  "yAxis": {
                    "name": "y_loc",
                    "index": 8.0,
                    "aggr": "sum"
                  },
                  "group": {
                    "name": "shot_zone",
                    "index": 6.0,
                    "aggr": "sum"
                  }
                }
              }
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "sql"
        },
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "feature_xy\tshot_made_numeric\tperiod_onehot\taction_type_onehot\th\tv\tshot_zone\tx_loc\ty_loc\n[1.2,8.35]\t1\t(5,[1],[1.0])\t(35,[19],[1.0])\t1\t0\t14\t1.2\t8.35\n[-17.6,24.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-17.6\t24.75\n[2.0,6.15]\t0\t(5,[1],[1.0])\t(35,[5],[1.0])\t1\t0\t14\t2.0\t6.15\n[-19.7,24.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-19.7\t24.55\n[-0.4,6.05]\t1\t(5,[1],[1.0])\t(35,[7],[1.0])\t1\t0\t0\t-0.4\t6.05\n[-1.1,31.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-1.1\t31.15\n[-11.7,24.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-11.7\t24.05\n[-17.9,28.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-17.9\t28.05\n[8.9,29.15]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t5\t8.9\t29.15\n[-15.6,28.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-15.6\t28.45\n[-1.9,7.35]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-1.9\t7.35\n[1.2,7.05]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t1.2\t7.05\n[-18.6,39.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-18.6\t39.75\n[16.4,23.75]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t16.4\t23.75\n[-9.6,13.75]\t1\t(5,[2],[1.0])\t(35,[29],[1.0])\t1\t0\t7\t-9.6\t13.75\n[16.6,22.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t16.6\t22.65\n[20.4,20.35]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t6\t20.4\t20.35\n[-0.9,6.05]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.9\t6.05\n[1.0,6.35]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t1\t0\t14\t1.0\t6.35\n[-0.7,6.55]\t1\t(5,[3],[1.0])\t(35,[19],[1.0])\t1\t0\t0\t-0.7\t6.55\n[4.2,11.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t17\t4.2\t11.35\n[16.1,25.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t16.1\t25.55\n[2.0,7.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t14\t2.0\t7.55\n[18.4,22.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t18.4\t22.25\n[-12.2,9.55]\t0\t(5,[4],[1.0])\t(35,[6],[1.0])\t1\t0\t7\t-12.2\t9.55\n[0.6,5.95]\t0\t(5,[4],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t0.6\t5.95\n[-10.9,20.65]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t7\t-10.9\t20.65\n[20.9,17.65]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t13\t20.9\t17.65\n[22.8,13.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t22.8\t13.95\n[-5.2,34.05]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t-5.2\t34.05\n[-12.9,26.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-12.9\t26.65\n[22.2,15.85]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t22.2\t15.85\n[-23.5,3.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t3.65\n[-24.0,15.25]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-24.0\t15.25\n[1.4,5.15]\t1\t(5,[2],[1.0])\t(35,[13],[1.0])\t0\t1\t14\t1.4\t5.15\n[-11.5,27.65]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t2\t-11.5\t27.65\n[3.5,12.75]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t3.5\t12.75\n[-4.3,16.25]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t0\t1\t8\t-4.3\t16.25\n[1.0,5.45]\t1\t(5,[4],[1.0])\t(35,[7],[1.0])\t0\t1\t14\t1.0\t5.45\n[-2.5,6.55]\t1\t(5,[4],[1.0])\t(35,[8],[1.0])\t0\t1\t0\t-2.5\t6.55\n[8.7,28.15]\t0\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t5\t8.7\t28.15\n[19.7,29.65]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t19.7\t29.65\n[7.6,31.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t7.6\t31.65\n[-2.2,24.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t8\t-2.2\t24.05\n[18.1,28.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t18.1\t28.45\n[12.2,29.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.2\t29.15\n[-7.3,13.25]\t0\t(5,[1],[1.0])\t(35,[16],[1.0])\t0\t1\t7\t-7.3\t13.25\n[1.9,14.25]\t1\t(5,[2],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t1.9\t14.25\n[23.6,4.15]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t23.6\t4.15\n[-7.8,30.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-7.8\t30.15\n[-14.2,29.95]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.2\t29.95\n[-22.5,17.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-22.5\t17.25\n[-18.1,24.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-18.1\t24.05\n[13.7,11.35]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t1\t13.7\t11.35\n[-11.9,23.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-11.9\t23.25\n[-0.1,6.85]\t1\t(5,[3],[1.0])\t(35,[13],[1.0])\t0\t1\t0\t-0.1\t6.85\n[18.7,22.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.7\t22.25\n[0.2,7.55]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t0.2\t7.55\n[1.7,6.05]\t1\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t1.7\t6.05\n[1.0,6.05]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t1.0\t6.05\n[19.4,23.75]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t19.4\t23.75\n[3.8,31.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t3.8\t31.95\n[-15.8,8.35]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t3\t-15.8\t8.35\n[-2.5,19.15]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t8\t-2.5\t19.15\n[12.3,6.35]\t1\t(5,[4],[1.0])\t(35,[10],[1.0])\t0\t1\t1\t12.3\t6.35\n[-14.5,31.15]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-14.5\t31.15\n[22.2,15.25]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t22.2\t15.25\n[-9.6,5.45]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t0\t-9.6\t5.45\n[-21.0,24.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-21.0\t24.05\n[-16.0,17.25]\t1\t(5,[1],[1.0])\t(35,[15],[1.0])\t1\t0\t7\t-16.0\t17.25\n[-2.0,29.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-2.0\t29.95\n[-20.2,23.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-20.2\t23.55\n[6.9,28.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t6.9\t28.95\n[2.8,7.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t14\t2.8\t7.35\n[16.3,25.55]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t16.3\t25.55\n[-0.7,11.45]\t1\t(5,[2],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t-0.7\t11.45\n[16.4,9.35]\t1\t(5,[3],[1.0])\t(35,[2],[1.0])\t1\t0\t1\t16.4\t9.35\n[-14.3,26.25]\t1\t(5,[3],[1.0])\t(35,[2],[1.0])\t1\t0\t11\t-14.3\t26.25\n[-0.9,5.95]\t0\t(5,[3],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t-0.9\t5.95\n[-0.6,7.85]\t1\t(5,[3],[1.0])\t(35,[20],[1.0])\t1\t0\t0\t-0.6\t7.85\n[0.9,7.85]\t1\t(5,[3],[1.0])\t(35,[20],[1.0])\t1\t0\t14\t0.9\t7.85\n[23.2,14.75]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t13\t23.2\t14.75\n[22.8,4.75]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t22.8\t4.75\n[1.2,14.95]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t1.2\t14.95\n[-4.3,29.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-4.3\t29.95\n[-15.1,27.55]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-15.1\t27.55\n[-12.2,31.65]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-12.2\t31.65\n[10.1,20.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t10.1\t20.65\n[-23.5,5.55]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.5\t5.55\n[4.3,29.95]\t1\t(5,[2],[1.0])\t(35,[2],[1.0])\t1\t0\t10\t4.3\t29.95\n[5.3,20.65]\t0\t(5,[3],[1.0])\t(35,[22],[1.0])\t1\t0\t19\t5.3\t20.65\n[12.8,32.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t12.8\t32.45\n[-0.3,5.65]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-0.3\t5.65\n[-5.6,29.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-5.6\t29.95\n[-0.4,13.75]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t17\t-0.4\t13.75\n[16.3,25.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t16.3\t25.55\n[-9.1,28.05]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t1\t0\t2\t-9.1\t28.05\n[10.1,30.15]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t10.1\t30.15\n[12.0,16.35]\t0\t(5,[4],[1.0])\t(35,[15],[1.0])\t1\t0\t19\t12.0\t16.35\n[-19.4,16.35]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-19.4\t16.35\n[-7.4,30.95]\t1\t(5,[4],[1.0])\t(35,[15],[1.0])\t1\t0\t2\t-7.4\t30.95\n[19.5,21.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t19.5\t21.15\n[1.0,5.45]\t0\t(5,[1],[1.0])\t(35,[5],[1.0])\t1\t0\t14\t1.0\t5.45\n[21.2,19.15]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t6\t21.2\t19.15\n[21.3,20.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t21.3\t20.15\n[-19.6,23.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-19.6\t23.55\n[-8.1,30.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-8.1\t30.45\n[8.7,18.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t8.7\t18.65\n[23.3,5.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t23.3\t5.15\n[13.8,28.05]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t5\t13.8\t28.05\n[-21.2,49.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-21.2\t49.15\n[-1.2,7.35]\t1\t(5,[2],[1.0])\t(35,[7],[1.0])\t1\t0\t0\t-1.2\t7.35\n[15.9,25.25]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t15\t15.9\t25.25\n[-21.2,18.65]\t1\t(5,[2],[1.0])\t(35,[18],[1.0])\t1\t0\t12\t-21.2\t18.65\n[-6.6,31.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-6.6\t31.45\n[23.6,6.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t23.6\t6.05\n[22.7,6.35]\t1\t(5,[3],[1.0])\t(35,[2],[1.0])\t1\t0\t18\t22.7\t6.35\n[-23.2,5.95]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.2\t5.95\n[1.0,16.35]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t1.0\t16.35\n[22.7,15.85]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t13\t22.7\t15.85\n[1.2,6.55]\t1\t(5,[3],[1.0])\t(35,[9],[1.0])\t1\t0\t14\t1.2\t6.55\n[1.7,7.05]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t1.7\t7.05\n[5.5,30.45]\t0\t(5,[4],[1.0])\t(35,[2],[1.0])\t1\t0\t10\t5.5\t30.45\n[-15.8,27.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.8\t27.55\n[-17.1,14.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t7\t-17.1\t14.45\n[2.4,6.35]\t1\t(5,[1],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t2.4\t6.35\n[-16.6,25.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-16.6\t25.65\n[-23.7,12.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.7\t12.25\n[10.4,28.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t10.4\t28.65\n[-17.6,18.85]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-17.6\t18.85\n[-3.8,11.75]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t-3.8\t11.75\n[12.3,25.75]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.3\t25.75\n[-0.2,7.55]\t1\t(5,[3],[1.0])\t(35,[7],[1.0])\t0\t1\t0\t-0.2\t7.55\n[22.7,9.85]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t22.7\t9.85\n[22.7,14.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t22.7\t14.25\n[1.4,7.55]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t1.4\t7.55\n[0.2,6.05]\t1\t(5,[3],[1.0])\t(35,[7],[1.0])\t0\t1\t0\t0.2\t6.05\n[13.0,26.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t13.0\t26.55\n[9.2,17.65]\t0\t(5,[4],[1.0])\t(35,[15],[1.0])\t0\t1\t19\t9.2\t17.65\n[7.1,31.65]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t7.1\t31.65\n[-23.5,7.35]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t7.35\n[-1.9,14.75]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t17\t-1.9\t14.75\n[-0.1,9.85]\t0\t(5,[1],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t-0.1\t9.85\n[15.6,8.35]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t1\t15.6\t8.35\n[9.6,13.25]\t0\t(5,[1],[1.0])\t(35,[6],[1.0])\t1\t0\t1\t9.6\t13.25\n[-23.2,8.35]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t3\t-23.2\t8.35\n[-21.4,18.65]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-21.4\t18.65\n[-7.9,19.35]\t0\t(5,[2],[1.0])\t(35,[6],[1.0])\t1\t0\t8\t-7.9\t19.35\n[-0.7,7.55]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.7\t7.55\n[13.7,26.05]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t15\t13.7\t26.05\n[-0.7,7.55]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.7\t7.55\n[-2.2,7.85]\t0\t(5,[3],[1.0])\t(35,[15],[1.0])\t1\t0\t0\t-2.2\t7.85\n[-22.8,5.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-22.8\t5.45\n[15.0,26.55]\t1\t(5,[3],[1.0])\t(35,[12],[1.0])\t1\t0\t15\t15.0\t26.55\n[19.2,21.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t19.2\t21.25\n[0.1,7.55]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t0.1\t7.55\n[11.7,20.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t11.7\t20.15\n[1.0,6.05]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t1.0\t6.05\n[-0.6,31.15]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-0.6\t31.15\n[2.5,5.45]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t2.5\t5.45\n[-16.6,25.05]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t11\t-16.6\t25.05\n[-23.5,8.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t8.55\n[-14.2,28.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.2\t28.05\n[15.9,15.85]\t0\t(5,[1],[1.0])\t(35,[12],[1.0])\t0\t1\t13\t15.9\t15.85\n[11.0,28.45]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t11.0\t28.45\n[-0.7,6.05]\t1\t(5,[2],[1.0])\t(35,[13],[1.0])\t0\t1\t0\t-0.7\t6.05\n[2.0,4.65]\t0\t(5,[2],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t2.0\t4.65\n[4.6,31.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.6\t31.65\n[-9.6,9.85]\t0\t(5,[3],[1.0])\t(35,[21],[1.0])\t0\t1\t7\t-9.6\t9.85\n[0.0,6.85]\t1\t(5,[3],[1.0])\t(35,[7],[1.0])\t0\t1\t0\t0.0\t6.85\n[-10.7,28.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-10.7\t28.45\n[15.1,20.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t15.1\t20.65\n[-1.6,26.65]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t-1.6\t26.65\n[0.9,6.35]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t0\t1\t14\t0.9\t6.35\n[-8.9,32.45]\t1\t(5,[3],[1.0])\t(35,[16],[1.0])\t0\t1\t2\t-8.9\t32.45\n[15.8,28.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t15.8\t28.45\n[1.2,4.75]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t1.2\t4.75\n[-19.9,39.45]\t1\t(5,[3],[1.0])\t(35,[15],[1.0])\t0\t1\t2\t-19.9\t39.45\n[-22.8,3.75]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-22.8\t3.75\n[0.9,5.45]\t1\t(5,[4],[1.0])\t(35,[13],[1.0])\t0\t1\t14\t0.9\t5.45\n[-14.5,28.65]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.5\t28.65\n[-23.5,12.75]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t12.75\n[-2.5,6.55]\t0\t(5,[1],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-2.5\t6.55\n[-24.0,6.85]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-24.0\t6.85\n[13.0,17.65]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t19\t13.0\t17.65\n[23.0,7.85]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t23.0\t7.85\n[0.4,5.15]\t1\t(5,[1],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t0.4\t5.15\n[2.7,11.35]\t0\t(5,[1],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t2.7\t11.35\n[9.1,27.65]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t9.1\t27.65\n[-15.3,27.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.3\t27.65\n[-0.1,16.25]\t1\t(5,[2],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t-0.1\t16.25\n[0.2,7.55]\t1\t(5,[2],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t0.2\t7.55\n[-21.4,6.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-21.4\t6.35\n[-0.6,5.45]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-0.6\t5.45\n[8.6,19.15]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t8.6\t19.15\n[11.2,28.45]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t11.2\t28.45\n[19.2,21.15]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t19.2\t21.15\n[-5.8,29.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-5.8\t29.95\n[-4.5,13.95]\t0\t(5,[3],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t-4.5\t13.95\n[7.6,30.45]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t7.6\t30.45\n[12.3,17.35]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t12.3\t17.35\n[15.1,26.55]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t15.1\t26.55\n[-17.4,26.55]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-17.4\t26.55\n[15.1,16.75]\t1\t(5,[4],[1.0])\t(35,[12],[1.0])\t0\t1\t19\t15.1\t16.75\n[5.1,30.95]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t5.1\t30.95\n[-1.4,11.75]\t1\t(5,[1],[1.0])\t(35,[11],[1.0])\t1\t0\t17\t-1.4\t11.75\n[-22.3,18.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-22.3\t18.65\n[22.7,6.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t22.7\t6.05\n[-6.3,31.15]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-6.3\t31.15\n[1.9,6.35]\t0\t(5,[1],[1.0])\t(35,[7],[1.0])\t1\t0\t14\t1.9\t6.35\n[-17.9,24.25]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-17.9\t24.25\n[3.5,11.75]\t0\t(5,[1],[1.0])\t(35,[11],[1.0])\t1\t0\t17\t3.5\t11.75\n[12.7,27.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t12.7\t27.15\n[-19.6,6.05]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-19.6\t6.05\n[-6.8,29.45]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-6.8\t29.45\n[-13.3,17.35]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t7\t-13.3\t17.35\n[-16.3,25.05]\t0\t(5,[3],[1.0])\t(35,[10],[1.0])\t1\t0\t11\t-16.3\t25.05\n[-0.1,7.35]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.1\t7.35\n[11.0,22.65]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t19\t11.0\t22.65\n[-17.8,26.65]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-17.8\t26.65\n[9.2,10.85]\t1\t(5,[3],[1.0])\t(35,[23],[1.0])\t1\t0\t1\t9.2\t10.85\n[-19.4,22.25]\t1\t(5,[3],[1.0])\t(35,[2],[1.0])\t1\t0\t12\t-19.4\t22.25\n[0.2,9.55]\t1\t(5,[3],[1.0])\t(35,[11],[1.0])\t1\t0\t17\t0.2\t9.55\n[12.0,28.45]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t5\t12.0\t28.45\n[9.1,29.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t9.1\t29.45\n[1.0,31.45]\t0\t(5,[3],[1.0])\t(35,[21],[1.0])\t1\t0\t4\t1.0\t31.45\n[-20.9,19.35]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-20.9\t19.35\n[-0.6,13.75]\t0\t(5,[4],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t-0.6\t13.75\n[14.1,25.25]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t14.1\t25.25\n[-23.5,9.95]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.5\t9.95\n[1.0,5.45]\t1\t(5,[4],[1.0])\t(35,[9],[1.0])\t1\t0\t14\t1.0\t5.45\n[-15.6,13.75]\t0\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t7\t-15.6\t13.75\n[-0.2,7.35]\t0\t(5,[4],[1.0])\t(35,[7],[1.0])\t1\t0\t0\t-0.2\t7.35\n[-16.5,23.75]\t0\t(5,[],[])\t(35,[18],[1.0])\t1\t0\t11\t-16.5\t23.75\n[0.0,5.35]\t1\t(5,[],[])\t(35,[25],[1.0])\t1\t0\t0\t0.0\t5.35\n[-12.5,18.15]\t0\t(5,[],[])\t(35,[2],[1.0])\t1\t0\t7\t-12.5\t18.15\n[-23.2,9.85]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-23.2\t9.85\n[-2.2,9.55]\t0\t(5,[1],[1.0])\t(35,[11],[1.0])\t1\t0\t0\t-2.2\t9.55\n[0.9,7.05]\t1\t(5,[1],[1.0])\t(35,[7],[1.0])\t1\t0\t14\t0.9\t7.05\n[-2.0,7.85]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t0\t-2.0\t7.85\n[6.4,30.45]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t6.4\t30.45\n[-17.8,23.75]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-17.8\t23.75\n[-23.3,6.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-23.3\t6.35\n[16.3,18.35]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t6\t16.3\t18.35\n[10.9,28.45]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t5\t10.9\t28.45\n[1.0,6.05]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t1\t0\t14\t1.0\t6.05\n[-0.4,10.85]\t1\t(5,[2],[1.0])\t(35,[18],[1.0])\t1\t0\t17\t-0.4\t10.85\n[-2.7,30.45]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-2.7\t30.45\n[-3.0,30.45]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-3.0\t30.45\n[5.5,24.55]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t5.5\t24.55\n[-1.9,6.85]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-1.9\t6.85\n[-12.2,29.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-12.2\t29.15\n[9.6,16.25]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t1\t0\t19\t9.6\t16.25\n[-14.7,25.75]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-14.7\t25.75\n[-3.2,13.45]\t1\t(5,[3],[1.0])\t(35,[11],[1.0])\t1\t0\t17\t-3.2\t13.45\n[6.6,14.25]\t0\t(5,[4],[1.0])\t(35,[6],[1.0])\t1\t0\t19\t6.6\t14.25\n[-0.4,30.95]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-0.4\t30.95\n[13.0,15.85]\t1\t(5,[4],[1.0])\t(35,[18],[1.0])\t1\t0\t19\t13.0\t15.85\n[4.3,8.85]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t14\t4.3\t8.85\n[-20.2,23.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-20.2\t23.05\n[-5.8,32.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-5.8\t32.45\n[16.3,26.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t16.3\t26.65\n[3.2,7.55]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t14\t3.2\t7.55\n[2.2,7.55]\t0\t(5,[2],[1.0])\t(35,[14],[1.0])\t0\t1\t14\t2.2\t7.55\n[23.6,7.35]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t23.6\t7.35\n[-7.0,30.45]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-7.0\t30.45\n[-2.9,6.35]\t1\t(5,[2],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-2.9\t6.35\n[-14.8,28.45]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.8\t28.45\n[-15.6,26.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.6\t26.55\n[10.9,23.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t10.9\t23.05\n[-0.1,8.85]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-0.1\t8.85\n[-12.0,28.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-12.0\t28.45\n[1.5,9.35]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t14\t1.5\t9.35\n[4.8,31.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.8\t31.15\n[2.8,6.55]\t1\t(5,[3],[1.0])\t(35,[16],[1.0])\t0\t1\t14\t2.8\t6.55\n[7.1,28.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t7.1\t28.95\n[8.7,18.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t8.7\t18.65\n[-12.5,27.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-12.5\t27.05\n[17.6,23.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t17.6\t23.05\n[14.5,26.55]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t14.5\t26.55\n[-4.7,29.45]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-4.7\t29.45\n[-12.7,26.55]\t1\t(5,[1],[1.0])\t(35,[12],[1.0])\t1\t0\t11\t-12.7\t26.55\n[-2.4,7.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t0\t-2.4\t7.35\n[1.4,13.75]\t1\t(5,[1],[1.0])\t(35,[33],[1.0])\t1\t0\t17\t1.4\t13.75\n[22.8,16.85]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t13\t22.8\t16.85\n[16.3,27.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t16.3\t27.05\n[7.9,30.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t7.9\t30.15\n[15.0,27.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t15.0\t27.15\n[11.4,27.55]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t11.4\t27.55\n[1.0,6.35]\t1\t(5,[2],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t1.0\t6.35\n[0.9,6.85]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t0.9\t6.85\n[0.2,11.35]\t1\t(5,[3],[1.0])\t(35,[11],[1.0])\t1\t0\t17\t0.2\t11.35\n[-15.6,26.55]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-15.6\t26.55\n[-21.9,18.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-21.9\t18.65\n[8.7,21.65]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t8.7\t21.65\n[-12.9,13.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t7\t-12.9\t13.95\n[14.0,26.05]\t0\t(5,[4],[1.0])\t(35,[2],[1.0])\t1\t0\t15\t14.0\t26.05\n[-2.9,30.45]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-2.9\t30.45\n[-6.5,30.45]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-6.5\t30.45\n[-0.4,6.05]\t0\t(5,[4],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.4\t6.05\n[0.9,5.55]\t1\t(5,[4],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t0.9\t5.55\n[0.0,6.05]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t0.0\t6.05\n[19.5,21.25]\t0\t(5,[1],[1.0])\t(35,[10],[1.0])\t0\t1\t6\t19.5\t21.25\n[18.2,22.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.2\t22.75\n[24.0,4.75]\t1\t(5,[1],[1.0])\t(35,[10],[1.0])\t0\t1\t18\t24.0\t4.75\n[1.4,5.45]\t1\t(5,[1],[1.0])\t(35,[7],[1.0])\t0\t1\t14\t1.4\t5.45\n[16.9,25.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t16.9\t25.75\n[17.7,5.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t17.7\t5.45\n[0.4,10.85]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t17\t0.4\t10.85\n[16.4,26.55]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t16.4\t26.55\n[0.6,5.25]\t0\t(5,[2],[1.0])\t(35,[4],[1.0])\t0\t1\t14\t0.6\t5.25\n[-16.0,5.55]\t1\t(5,[3],[1.0])\t(35,[10],[1.0])\t0\t1\t3\t-16.0\t5.55\n[-21.7,12.25]\t1\t(5,[3],[1.0])\t(35,[2],[1.0])\t0\t1\t3\t-21.7\t12.25\n[3.2,30.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t3.2\t30.15\n[3.0,30.65]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t3.0\t30.65\n[1.4,6.35]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t1.4\t6.35\n[22.5,14.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t22.5\t14.25\n[15.0,25.75]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t15\t15.0\t25.75\n[-23.3,9.95]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.3\t9.95\n[0.4,31.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t0.4\t31.95\n[-0.6,6.35]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.6\t6.35\n[-18.4,23.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-18.4\t23.25\n[11.5,19.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t11.5\t19.65\n[9.9,29.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t9.9\t29.15\n[11.5,28.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t11.5\t28.05\n[2.4,21.65]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t8\t2.4\t21.65\n[-7.9,15.85]\t0\t(5,[2],[1.0])\t(35,[18],[1.0])\t1\t0\t7\t-7.9\t15.85\n[16.3,56.95]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t9\t16.3\t56.95\n[6.4,7.85]\t1\t(5,[3],[1.0])\t(35,[18],[1.0])\t1\t0\t14\t6.4\t7.85\n[-16.9,25.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-16.9\t25.55\n[23.2,7.55]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t18\t23.2\t7.55\n[0.1,5.95]\t1\t(5,[3],[1.0])\t(35,[13],[1.0])\t1\t0\t0\t0.1\t5.95\n[-7.6,30.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-7.6\t30.45\n[-0.1,7.85]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.1\t7.85\n[-14.8,28.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-14.8\t28.15\n[0.9,7.35]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t1\t0\t14\t0.9\t7.35\n[14.3,28.95]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t5\t14.3\t28.95\n[1.0,5.95]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t1\t0\t14\t1.0\t5.95\n[-23.5,5.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t5.95\n[-11.7,27.55]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t2\t-11.7\t27.55\n[20.4,20.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t20.4\t20.15\n[17.4,22.75]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t17.4\t22.75\n[17.1,24.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t17.1\t24.05\n[18.2,22.25]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.2\t22.25\n[-1.7,5.15]\t0\t(5,[1],[1.0])\t(35,[9],[1.0])\t0\t1\t0\t-1.7\t5.15\n[-13.8,26.55]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-13.8\t26.55\n[2.7,5.45]\t1\t(5,[2],[1.0])\t(35,[13],[1.0])\t0\t1\t14\t2.7\t5.45\n[-14.2,28.15]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t11\t-14.2\t28.15\n[4.8,30.15]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.8\t30.15\n[-10.1,30.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-10.1\t30.15\n[0.2,7.35]\t1\t(5,[3],[1.0])\t(35,[8],[1.0])\t0\t1\t0\t0.2\t7.35\n[-9.7,27.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-9.7\t27.15\n[-1.7,5.95]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-1.7\t5.95\n[21.7,16.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t21.7\t16.25\n[-22.7,4.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-22.7\t4.15\n[-19.7,21.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-19.7\t21.25\n[-10.2,28.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-10.2\t28.45\n[-21.2,43.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-21.2\t43.45\n[0.9,29.95]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t4\t0.9\t29.95\n[-1.2,6.85]\t1\t(5,[1],[1.0])\t(35,[20],[1.0])\t1\t0\t0\t-1.2\t6.85\n[5.1,30.95]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t5.1\t30.95\n[-20.2,20.15]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-20.2\t20.15\n[15.8,24.55]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t15\t15.8\t24.55\n[8.2,29.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t8.2\t29.45\n[-6.6,30.65]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-6.6\t30.65\n[21.2,20.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t21.2\t20.15\n[15.6,9.85]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t1\t15.6\t9.85\n[16.4,22.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t16.4\t22.75\n[3.2,5.95]\t1\t(5,[1],[1.0])\t(35,[17],[1.0])\t0\t1\t14\t3.2\t5.95\n[2.8,6.35]\t0\t(5,[1],[1.0])\t(35,[17],[1.0])\t0\t1\t14\t2.8\t6.35\n[3.8,5.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t14\t3.8\t5.25\n[-2.4,5.25]\t0\t(5,[2],[1.0])\t(35,[17],[1.0])\t0\t1\t0\t-2.4\t5.25\n[-4.7,30.95]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-4.7\t30.95\n[2.5,4.65]\t1\t(5,[3],[1.0])\t(35,[14],[1.0])\t0\t1\t14\t2.5\t4.65\n[-19.2,4.15]\t0\t(5,[3],[1.0])\t(35,[2],[1.0])\t0\t1\t3\t-19.2\t4.15\n[-20.4,20.85]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-20.4\t20.85\n[-2.0,6.55]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-2.0\t6.55\n[-17.3,23.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-17.3\t23.05\n[1.9,4.65]\t1\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t1.9\t4.65\n[11.9,26.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t11.9\t26.05\n[-2.0,30.65]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-2.0\t30.65\n[-12.5,22.75]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t11\t-12.5\t22.75\n[0.2,5.95]\t0\t(5,[4],[1.0])\t(35,[7],[1.0])\t0\t1\t0\t0.2\t5.95\n[-20.5,21.75]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t12\t-20.5\t21.75\n[12.0,25.05]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.0\t25.05\n[-23.8,6.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.8\t6.35\n[21.8,16.85]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t13\t21.8\t16.85\n[1.9,35.35]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t1.9\t35.35\n[10.4,34.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t10.4\t34.35\n[1.2,30.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t1.2\t30.45\n[0.9,7.85]\t1\t(5,[2],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t0.9\t7.85\n[23.2,7.05]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t23.2\t7.05\n[1.4,6.55]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t1.4\t6.55\n[-1.1,6.35]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-1.1\t6.35\n[-2.9,18.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t8\t-2.9\t18.15\n[-0.9,5.55]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-0.9\t5.55\n[-23.5,6.85]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t6.85\n[-0.9,6.85]\t1\t(5,[3],[1.0])\t(35,[7],[1.0])\t0\t1\t0\t-0.9\t6.85\n[-6.3,29.45]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-6.3\t29.45\n[14.3,31.45]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t0\t1\t5\t14.3\t31.45\n[0.9,6.05]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t0.9\t6.05\n[-10.1,31.95]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-10.1\t31.95\n[15.8,30.95]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t0\t1\t5\t15.8\t30.95\n[15.3,24.25]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t15\t15.3\t24.25\n[0.4,29.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t0.4\t29.45\n[22.8,7.85]\t1\t(5,[1],[1.0])\t(35,[15],[1.0])\t0\t1\t18\t22.8\t7.85\n[6.9,18.85]\t1\t(5,[1],[1.0])\t(35,[22],[1.0])\t0\t1\t19\t6.9\t18.85\n[5.0,29.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t5.0\t29.45\n[9.9,28.95]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t5\t9.9\t28.95\n[-0.2,29.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-0.2\t29.45\n[4.8,16.75]\t1\t(5,[1],[1.0])\t(35,[11],[1.0])\t0\t1\t19\t4.8\t16.75\n[1.0,6.55]\t0\t(5,[1],[1.0])\t(35,[14],[1.0])\t0\t1\t14\t1.0\t6.55\n[-21.5,16.75]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-21.5\t16.75\n[-0.2,9.35]\t1\t(5,[2],[1.0])\t(35,[17],[1.0])\t0\t1\t0\t-0.2\t9.35\n[0.6,29.45]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t0.6\t29.45\n[-3.0,8.35]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-3.0\t8.35\n[-6.6,12.45]\t0\t(5,[3],[1.0])\t(35,[11],[1.0])\t0\t1\t7\t-6.6\t12.45\n[-10.4,16.25]\t0\t(5,[3],[1.0])\t(35,[11],[1.0])\t0\t1\t7\t-10.4\t16.25\n[-23.8,6.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.8\t6.05\n[18.4,20.85]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.4\t20.85\n[7.1,9.85]\t1\t(5,[3],[1.0])\t(35,[23],[1.0])\t0\t1\t1\t7.1\t9.85\n[17.6,23.25]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t0\t1\t6\t17.6\t23.25\n[-8.4,10.95]\t0\t(5,[4],[1.0])\t(35,[11],[1.0])\t0\t1\t7\t-8.4\t10.95\n[-21.0,25.05]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-21.0\t25.05\n[0.4,30.45]\t1\t(5,[4],[1.0])\t(35,[22],[1.0])\t0\t1\t4\t0.4\t30.45\n[0.2,30.15]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t0.2\t30.15\n[-4.5,30.45]\t0\t(5,[4],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t-4.5\t30.45\n[-23.2,14.75]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-23.2\t14.75\n[-19.2,21.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-19.2\t21.25\n[-2.4,5.55]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-2.4\t5.55\n[2.5,5.95]\t1\t(5,[1],[1.0])\t(35,[19],[1.0])\t0\t1\t14\t2.5\t5.95\n[8.4,18.15]\t1\t(5,[2],[1.0])\t(35,[6],[1.0])\t0\t1\t19\t8.4\t18.15\n[-10.6,32.15]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-10.6\t32.15\n[0.0,30.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t0.0\t30.15\n[2.4,5.45]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t2.4\t5.45\n[-22.0,16.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-22.0\t16.25\n[-23.0,8.35]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.0\t8.35\n[23.3,3.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t23.3\t3.15\n[6.6,10.85]\t1\t(5,[3],[1.0])\t(35,[16],[1.0])\t0\t1\t1\t6.6\t10.85\n[17.3,26.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t17.3\t26.55\n[2.5,16.25]\t0\t(5,[3],[1.0])\t(35,[15],[1.0])\t0\t1\t17\t2.5\t16.25\n[2.7,5.95]\t1\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t2.7\t5.95\n[-20.7,18.15]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-20.7\t18.15\n[-2.4,4.25]\t0\t(5,[4],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-2.4\t4.25\n[13.5,27.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t13.5\t27.05\n[0.1,4.75]\t1\t(5,[1],[1.0])\t(35,[31],[1.0])\t0\t1\t0\t0.1\t4.75\n[16.3,16.25]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t13\t16.3\t16.25\n[0.9,6.05]\t1\t(5,[1],[1.0])\t(35,[8],[1.0])\t0\t1\t14\t0.9\t6.05\n[-19.9,24.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-19.9\t24.55\n[18.7,24.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.7\t24.05\n[1.4,5.45]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t0\t1\t14\t1.4\t5.45\n[-18.7,24.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-18.7\t24.55\n[-14.0,25.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.0\t25.55\n[9.2,21.65]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t19\t9.2\t21.65\n[20.9,20.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t20.9\t20.65\n[21.8,17.25]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t21.8\t17.25\n[-1.2,4.65]\t0\t(5,[2],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-1.2\t4.65\n[21.0,19.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t21.0\t19.65\n[-2.2,5.95]\t0\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-2.2\t5.95\n[-1.4,4.75]\t1\t(5,[3],[1.0])\t(35,[20],[1.0])\t0\t1\t0\t-1.4\t4.75\n[-2.5,12.95]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t17\t-2.5\t12.95\n[19.7,26.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t19.7\t26.05\n[15.9,15.85]\t1\t(5,[3],[1.0])\t(35,[2],[1.0])\t0\t1\t13\t15.9\t15.85\n[7.6,22.15]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t19\t7.6\t22.15\n[16.8,26.05]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t16.8\t26.05\n[2.7,8.85]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t14\t2.7\t8.85\n[-3.4,5.95]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-3.4\t5.95\n[14.8,19.85]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t14.8\t19.85\n[14.0,27.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t14.0\t27.55\n[2.0,5.95]\t0\t(5,[1],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t2.0\t5.95\n[14.3,28.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t14.3\t28.45\n[0.6,31.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t0.6\t31.95\n[5.3,6.05]\t0\t(5,[1],[1.0])\t(35,[6],[1.0])\t0\t1\t14\t5.3\t6.05\n[3.0,12.25]\t0\t(5,[1],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t3.0\t12.25\n[1.2,5.55]\t1\t(5,[1],[1.0])\t(35,[7],[1.0])\t0\t1\t14\t1.2\t5.55\n[-19.6,20.15]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-19.6\t20.15\n[18.2,28.05]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t15\t18.2\t28.05\n[21.0,21.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t21.0\t21.65\n[12.8,28.95]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.8\t28.95\n[-7.9,26.05]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-7.9\t26.05\n[2.0,29.95]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t2.0\t29.95\n[-1.4,6.85]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-1.4\t6.85\n[16.3,18.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t16.3\t18.65\n[0.9,5.45]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t0\t1\t14\t0.9\t5.45\n[4.2,29.95]\t1\t(5,[4],[1.0])\t(35,[10],[1.0])\t0\t1\t10\t4.2\t29.95\n[-2.0,6.55]\t0\t(5,[4],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-2.0\t6.55\n[14.5,18.15]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t14.5\t18.15\n[1.9,31.45]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t1.9\t31.45\n[-0.5,6.65]\t0\t(5,[4],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-0.5\t6.65\n[-2.4,34.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-2.4\t34.05\n[-14.7,14.75]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t7\t-14.7\t14.75\n[-14.5,26.65]\t0\t(5,[],[])\t(35,[0],[1.0])\t0\t1\t11\t-14.5\t26.65\n[1.0,5.45]\t1\t(5,[],[])\t(35,[4],[1.0])\t0\t1\t14\t1.0\t5.45\n[17.6,24.75]\t0\t(5,[],[])\t(35,[0],[1.0])\t0\t1\t15\t17.6\t24.75\n[-7.4,33.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-7.4\t33.45\n[21.3,19.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t21.3\t19.15\n[1.0,5.95]\t1\t(5,[1],[1.0])\t(35,[14],[1.0])\t0\t1\t14\t1.0\t5.95\n[-1.1,6.05]\t1\t(5,[1],[1.0])\t(35,[9],[1.0])\t0\t1\t0\t-1.1\t6.05\n[22.2,4.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t22.2\t4.15\n[-1.6,5.55]\t1\t(5,[1],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-1.6\t5.55\n[-0.7,19.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t8\t-0.7\t19.15\n[-3.4,7.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t0\t-3.4\t7.05\n[-23.7,4.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.7\t4.15\n[16.8,3.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t16.8\t3.15\n[0.1,14.25]\t0\t(5,[2],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t0.1\t14.25\n[15.9,11.45]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t1\t15.9\t11.45\n[-1.3,6.65]\t0\t(5,[2],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-1.3\t6.65\n[0.3,29.75]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t0.3\t29.75\n[-0.9,5.55]\t1\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-0.9\t5.55\n[8.6,30.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t8.6\t30.95\n[-0.7,5.95]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-0.7\t5.95\n[-19.1,5.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-19.1\t5.55\n[6.0,29.15]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t6.0\t29.15\n[15.3,26.65]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t15.3\t26.65\n[-0.2,5.45]\t1\t(5,[4],[1.0])\t(35,[8],[1.0])\t0\t1\t0\t-0.2\t5.45\n[-11.2,29.45]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-11.2\t29.45\n[-0.4,7.35]\t0\t(5,[1],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-0.4\t7.35\n[7.8,20.65]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t19\t7.8\t20.65\n[11.4,29.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t11.4\t29.95\n[-10.7,27.65]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-10.7\t27.65\n[4.2,13.75]\t1\t(5,[2],[1.0])\t(35,[],[])\t1\t0\t17\t4.2\t13.75\n[-9.2,28.95]\t1\t(5,[2],[1.0])\t(35,[2],[1.0])\t1\t0\t2\t-9.2\t28.95\n[-1.6,5.95]\t1\t(5,[2],[1.0])\t(35,[20],[1.0])\t1\t0\t0\t-1.6\t5.95\n[15.3,26.05]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t15\t15.3\t26.05\n[-6.6,31.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-6.6\t31.65\n[5.3,14.75]\t1\t(5,[3],[1.0])\t(35,[11],[1.0])\t1\t0\t17\t5.3\t14.75\n[0.9,6.85]\t1\t(5,[3],[1.0])\t(35,[7],[1.0])\t1\t0\t14\t0.9\t6.85\n[0.0,6.35]\t1\t(5,[3],[1.0])\t(35,[14],[1.0])\t1\t0\t0\t0.0\t6.35\n[0.0,7.85]\t1\t(5,[3],[1.0])\t(35,[8],[1.0])\t1\t0\t0\t0.0\t7.85\n[12.0,21.75]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t12.0\t21.75\n[14.8,24.25]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t14.8\t24.25\n[-2.2,6.35]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-2.2\t6.35\n[-1.7,13.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t17\t-1.7\t13.75\n[-3.7,14.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t17\t-3.7\t14.95\n[-19.4,22.75]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t12\t-19.4\t22.75\n[-20.4,23.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-20.4\t23.55\n[-3.0,13.75]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t17\t-3.0\t13.75\n[4.2,30.45]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t4.2\t30.45\n[-19.4,21.15]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-19.4\t21.15\n[-21.2,6.05]\t1\t(5,[3],[1.0])\t(35,[2],[1.0])\t1\t0\t3\t-21.2\t6.05\n[-1.2,6.35]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-1.2\t6.35\n[0.6,9.35]\t1\t(5,[4],[1.0])\t(35,[24],[1.0])\t1\t0\t14\t0.6\t9.35\n[-0.4,6.85]\t1\t(5,[4],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t-0.4\t6.85\n[21.7,17.25]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t13\t21.7\t17.25\n[4.6,29.65]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t4.6\t29.65\n[15.5,18.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t15.5\t18.15\n[-1.4,6.35]\t1\t(5,[1],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t-1.4\t6.35\n[-9.2,29.45]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-9.2\t29.45\n[-22.8,9.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-22.8\t9.05\n[-9.6,8.05]\t1\t(5,[1],[1.0])\t(35,[6],[1.0])\t1\t0\t7\t-9.6\t8.05\n[1.0,7.35]\t0\t(5,[2],[1.0])\t(35,[14],[1.0])\t1\t0\t14\t1.0\t7.35\n[15.8,24.25]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t15.8\t24.25\n[8.2,24.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t8.2\t24.05\n[-17.1,27.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-17.1\t27.05\n[-23.3,7.85]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-23.3\t7.85\n[-24.1,6.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-24.1\t6.35\n[-0.9,8.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t0\t-0.9\t8.35\n[-23.8,9.55]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.8\t9.55\n[0.4,6.85]\t0\t(5,[1],[1.0])\t(35,[5],[1.0])\t1\t0\t14\t0.4\t6.85\n[18.4,6.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t18.4\t6.35\n[-0.1,13.75]\t0\t(5,[1],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t-0.1\t13.75\n[0.4,5.95]\t1\t(5,[1],[1.0])\t(35,[8],[1.0])\t1\t0\t14\t0.4\t5.95\n[-20.4,26.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-20.4\t26.55\n[0.2,6.85]\t0\t(5,[1],[1.0])\t(35,[7],[1.0])\t1\t0\t0\t0.2\t6.85\n[0.0,76.45]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t16\t0.0\t76.45\n[-1.2,7.35]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-1.2\t7.35\n[6.9,23.55]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t19\t6.9\t23.55\n[1.7,8.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t14\t1.7\t8.05\n[-9.2,29.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-9.2\t29.95\n[-0.7,7.85]\t0\t(5,[4],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-0.7\t7.85\n[0.4,6.35]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t1\t0\t14\t0.4\t6.35\n[0.1,7.35]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t0.1\t7.35\n[17.1,25.25]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t17.1\t25.25\n[2.2,30.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t2.2\t30.45\n[18.6,5.45]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t18\t18.6\t5.45\n[-6.1,29.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-6.1\t29.45\n[-5.2,31.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-5.2\t31.15\n[20.9,18.65]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t6\t20.9\t18.65\n[2.2,30.65]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t2.2\t30.65\n[-19.7,22.15]\t1\t(5,[2],[1.0])\t(35,[2],[1.0])\t1\t0\t12\t-19.7\t22.15\n[-22.5,5.15]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-22.5\t5.15\n[-5.5,31.45]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-5.5\t31.45\n[-2.2,32.95]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-2.2\t32.95\n[-0.6,7.85]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.6\t7.85\n[-11.7,30.95]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-11.7\t30.95\n[-16.9,24.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-16.9\t24.55\n[-1.2,7.85]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-1.2\t7.85\n[23.5,8.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t23.5\t8.05\n[-14.2,27.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-14.2\t27.55\n[-0.7,6.35]\t1\t(5,[1],[1.0])\t(35,[13],[1.0])\t1\t0\t0\t-0.7\t6.35\n[23.0,15.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t13\t23.0\t15.25\n[-23.7,9.85]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t1\t0\t3\t-23.7\t9.85\n[-17.6,26.55]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-17.6\t26.55\n[-22.5,18.15]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-22.5\t18.15\n[-20.4,20.65]\t0\t(5,[2],[1.0])\t(35,[18],[1.0])\t1\t0\t12\t-20.4\t20.65\n[-18.6,23.25]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-18.6\t23.25\n[-0.6,6.35]\t1\t(5,[1],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t-0.6\t6.35\n[-20.7,22.75]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-20.7\t22.75\n[-1.6,7.55]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-1.6\t7.55\n[22.5,5.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t22.5\t5.15\n[1.2,6.55]\t1\t(5,[2],[1.0])\t(35,[13],[1.0])\t1\t0\t14\t1.2\t6.55\n[1.9,32.45]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t1.9\t32.45\n[-3.4,31.95]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-3.4\t31.95\n[8.9,7.35]\t1\t(5,[2],[1.0])\t(35,[6],[1.0])\t1\t0\t1\t8.9\t7.35\n[-10.6,9.55]\t0\t(5,[3],[1.0])\t(35,[12],[1.0])\t1\t0\t7\t-10.6\t9.55\n[16.8,13.75]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t13\t16.8\t13.75\n[15.8,26.55]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t15\t15.8\t26.55\n[1.2,6.85]\t1\t(5,[3],[1.0])\t(35,[13],[1.0])\t1\t0\t14\t1.2\t6.85\n[20.4,19.15]\t1\t(5,[3],[1.0])\t(35,[10],[1.0])\t1\t0\t6\t20.4\t19.15\n[1.2,30.95]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t1.2\t30.95\n[-9.2,12.25]\t1\t(5,[4],[1.0])\t(35,[6],[1.0])\t1\t0\t7\t-9.2\t12.25\n[18.6,25.05]\t0\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t15\t18.6\t25.05\n[-1.6,6.35]\t0\t(5,[4],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-1.6\t6.35\n[-2.2,6.55]\t0\t(5,[4],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-2.2\t6.55\n[-0.6,7.85]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t-0.6\t7.85\n[18.7,23.55]\t0\t(5,[4],[1.0])\t(35,[10],[1.0])\t1\t0\t6\t18.7\t23.55\n[14.3,24.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t14.3\t24.55\n[0.4,7.85]\t0\t(5,[1],[1.0])\t(35,[17],[1.0])\t0\t1\t14\t0.4\t7.85\n[-25.0,5.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-25.0\t5.95\n[0.5,7.35]\t1\t(5,[2],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t0.5\t7.35\n[-19.4,23.05]\t1\t(5,[2],[1.0])\t(35,[2],[1.0])\t0\t1\t12\t-19.4\t23.05\n[18.6,23.05]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.6\t23.05\n[0.9,6.85]\t0\t(5,[2],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t0.9\t6.85\n[23.5,3.75]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t23.5\t3.75\n[14.1,26.65]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t14.1\t26.65\n[16.4,24.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t16.4\t24.05\n[-6.0,4.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t0\t-6.0\t4.65\n[0.4,7.85]\t1\t(5,[3],[1.0])\t(35,[17],[1.0])\t0\t1\t14\t0.4\t7.85\n[-23.7,3.15]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.7\t3.15\n[22.7,6.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t22.7\t6.05\n[-8.8,15.75]\t1\t(5,[1],[1.0])\t(35,[27],[1.0])\t0\t1\t7\t-8.8\t15.75\n[20.7,5.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t20.7\t5.55\n[22.7,5.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t22.7\t5.95\n[-13.5,25.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-13.5\t25.75\n[0.9,5.95]\t1\t(5,[1],[1.0])\t(35,[7],[1.0])\t0\t1\t14\t0.9\t5.95\n[1.9,5.45]\t1\t(5,[1],[1.0])\t(35,[8],[1.0])\t0\t1\t14\t1.9\t5.45\n[20.4,18.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t20.4\t18.65\n[1.2,5.95]\t0\t(5,[2],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t1.2\t5.95\n[-15.1,25.25]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.1\t25.25\n[-15.3,25.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.3\t25.55\n[-0.7,5.95]\t1\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-0.7\t5.95\n[6.3,28.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t6.3\t28.95\n[1.2,29.45]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t1.2\t29.45\n[12.0,26.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.0\t26.55\n[1.2,5.45]\t0\t(5,[3],[1.0])\t(35,[9],[1.0])\t0\t1\t14\t1.2\t5.45\n[-19.1,23.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-19.1\t23.25\n[-18.7,26.65]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-18.7\t26.65\n[4.6,29.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.6\t29.65\n[22.5,6.85]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t18\t22.5\t6.85\n[22.0,18.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t22.0\t18.35\n[-8.4,29.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-8.4\t29.15\n[-17.6,22.15]\t1\t(5,[2],[1.0])\t(35,[10],[1.0])\t0\t1\t12\t-17.6\t22.15\n[0.4,14.25]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t17\t0.4\t14.25\n[9.7,6.35]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t1\t9.7\t6.35\n[-4.3,30.15]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-4.3\t30.15\n[2.4,7.35]\t1\t(5,[2],[1.0])\t(35,[8],[1.0])\t0\t1\t14\t2.4\t7.35\n[4.6,33.05]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.6\t33.05\n[-14.8,28.05]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.8\t28.05\n[21.3,22.65]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t21.3\t22.65\n[-2.4,11.75]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t17\t-2.4\t11.75\n[-1.9,29.95]\t0\t(5,[3],[1.0])\t(35,[2],[1.0])\t0\t1\t4\t-1.9\t29.95\n[-22.5,17.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-22.5\t17.25\n[1.2,12.25]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t17\t1.2\t12.25\n[18.9,22.65]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.9\t22.65\n[3.7,6.35]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t14\t3.7\t6.35\n[-23.2,6.85]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.2\t6.85\n[-20.5,22.15]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-20.5\t22.15\n[-2.4,27.65]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t4\t-2.4\t27.65\n[-0.2,27.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-0.2\t27.55\n[-23.3,6.35]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.3\t6.35\n[-0.4,11.75]\t0\t(5,[1],[1.0])\t(35,[12],[1.0])\t1\t0\t17\t-0.4\t11.75\n[-0.1,7.35]\t0\t(5,[1],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-0.1\t7.35\n[-0.4,7.35]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t-0.4\t7.35\n[-0.9,6.55]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t-0.9\t6.55\n[-0.9,6.85]\t0\t(5,[1],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t-0.9\t6.85\n[10.7,29.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t10.7\t29.45\n[-0.7,12.75]\t1\t(5,[1],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t-0.7\t12.75\n[-0.2,9.35]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t0\t-0.2\t9.35\n[6.8,20.65]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t19\t6.8\t20.65\n[9.9,28.05]\t0\t(5,[2],[1.0])\t(35,[2],[1.0])\t1\t0\t5\t9.9\t28.05\n[-20.2,24.05]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-20.2\t24.05\n[-1.9,9.35]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t0\t-1.9\t9.35\n[-0.6,6.05]\t1\t(5,[3],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t-0.6\t6.05\n[0.1,20.15]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t8\t0.1\t20.15\n[18.6,28.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t18.6\t28.65\n[16.6,26.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t16.6\t26.55\n[2.2,7.05]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t1\t0\t14\t2.2\t7.05\n[-11.4,11.75]\t0\t(5,[3],[1.0])\t(35,[12],[1.0])\t1\t0\t7\t-11.4\t11.75\n[22.7,3.35]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t18\t22.7\t3.35\n[13.3,54.85]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t9\t13.3\t54.85\n[-0.6,11.85]\t0\t(5,[4],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t-0.6\t11.85\n[22.2,20.15]\t0\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t6\t22.2\t20.15\n[-14.0,27.05]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-14.0\t27.05\n[12.7,18.65]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t19\t12.7\t18.65\n[-11.7,28.45]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-11.7\t28.45\n[-1.7,5.15]\t0\t(5,[1],[1.0])\t(35,[19],[1.0])\t0\t1\t0\t-1.7\t5.15\n[-11.7,28.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-11.7\t28.45\n[14.3,26.05]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t15\t14.3\t26.05\n[0.0,5.45]\t0\t(5,[1],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t0.0\t5.45\n[18.6,23.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t18.6\t23.05\n[18.1,9.95]\t0\t(5,[2],[1.0])\t(35,[10],[1.0])\t0\t1\t18\t18.1\t9.95\n[15.0,26.05]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t15.0\t26.05\n[-1.4,5.25]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-1.4\t5.25\n[16.4,26.25]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t16.4\t26.25\n[-8.6,28.95]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t2\t-8.6\t28.95\n[-14.3,12.75]\t1\t(5,[3],[1.0])\t(35,[10],[1.0])\t0\t1\t7\t-14.3\t12.75\n[0.6,9.95]\t1\t(5,[3],[1.0])\t(35,[23],[1.0])\t0\t1\t17\t0.6\t9.95\n[12.8,27.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.8\t27.05\n[13.5,26.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t13.5\t26.05\n[-10.1,29.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-10.1\t29.95\n[0.9,5.15]\t1\t(5,[3],[1.0])\t(35,[9],[1.0])\t0\t1\t14\t0.9\t5.15\n[0.9,5.55]\t0\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t0.9\t5.55\n[1.9,5.95]\t0\t(5,[4],[1.0])\t(35,[7],[1.0])\t0\t1\t14\t1.9\t5.95\n[1.7,5.55]\t1\t(5,[4],[1.0])\t(35,[9],[1.0])\t0\t1\t14\t1.7\t5.55\n[-19.6,25.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-19.6\t25.05\n[-1.2,6.05]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-1.2\t6.05\n[-0.7,6.85]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-0.7\t6.85\n[15.0,24.25]\t1\t(5,[4],[1.0])\t(35,[10],[1.0])\t0\t1\t15\t15.0\t24.25\n[1.9,6.55]\t1\t(5,[4],[1.0])\t(35,[4],[1.0])\t0\t1\t14\t1.9\t6.55\n[-13.8,35.55]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t0\t1\t2\t-13.8\t35.55\n[0.2,6.85]\t0\t(5,[1],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t0.2\t6.85\n[-20.7,23.05]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-20.7\t23.05\n[-0.7,31.15]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-0.7\t31.15\n[4.3,31.95]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t4.3\t31.95\n[-18.7,24.25]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-18.7\t24.25\n[19.2,23.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t19.2\t23.05\n[-4.2,66.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t16\t-4.2\t66.35\n[-21.5,21.15]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-21.5\t21.15\n[-9.9,29.45]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-9.9\t29.45\n[-19.7,21.15]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t12\t-19.7\t21.15\n[-23.5,9.95]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-23.5\t9.95\n[19.7,19.65]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t6\t19.7\t19.65\n[18.4,21.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t18.4\t21.65\n[14.5,27.55]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t15\t14.5\t27.55\n[-23.8,10.85]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.8\t10.85\n[16.9,24.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t16.9\t24.25\n[0.0,5.35]\t1\t(5,[3],[1.0])\t(35,[28],[1.0])\t1\t0\t0\t0.0\t5.35\n[17.6,29.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t15\t17.6\t29.95\n[-15.8,26.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.8\t26.05\n[11.5,29.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t11.5\t29.15\n[-4.0,20.35]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t8\t-4.0\t20.35\n[-0.9,4.65]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-0.9\t4.65\n[-9.7,33.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-9.7\t33.45\n[-16.3,26.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-16.3\t26.55\n[-6.0,32.15]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-6.0\t32.15\n[-14.7,11.95]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t7\t-14.7\t11.95\n[-19.1,25.05]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-19.1\t25.05\n[-0.1,5.45]\t1\t(5,[2],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-0.1\t5.45\n[7.1,31.95]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t7.1\t31.95\n[6.4,7.85]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t14\t6.4\t7.85\n[8.2,18.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t8.2\t18.65\n[-0.2,5.15]\t1\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-0.2\t5.15\n[14.3,16.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t14.3\t16.25\n[-0.2,11.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t17\t-0.2\t11.45\n[21.3,19.35]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t21.3\t19.35\n[-15.1,26.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.1\t26.55\n[-11.4,28.65]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-11.4\t28.65\n[8.9,29.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t8.9\t29.45\n[12.5,28.65]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.5\t28.65\n[-23.8,9.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.8\t9.35\n[6.1,8.85]\t0\t(5,[3],[1.0])\t(35,[6],[1.0])\t0\t1\t14\t6.1\t8.85\n[9.4,30.45]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t9.4\t30.45\n[-7.3,19.35]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t8\t-7.3\t19.35\n[23.3,15.25]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t23.3\t15.25\n[-12.5,30.65]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-12.5\t30.65\n[-1.6,5.15]\t1\t(5,[1],[1.0])\t(35,[7],[1.0])\t0\t1\t0\t-1.6\t5.15\n[-19.1,21.25]\t0\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t12\t-19.1\t21.25\n[21.0,16.75]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t21.0\t16.75\n[-0.7,4.25]\t1\t(5,[1],[1.0])\t(35,[8],[1.0])\t0\t1\t0\t-0.7\t4.25\n[-5.0,31.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-5.0\t31.95\n[21.3,16.75]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t21.3\t16.75\n[-0.9,5.45]\t1\t(5,[2],[1.0])\t(35,[8],[1.0])\t0\t1\t0\t-0.9\t5.45\n[-0.9,9.35]\t0\t(5,[2],[1.0])\t(35,[16],[1.0])\t0\t1\t0\t-0.9\t9.35\n[0.2,4.65]\t1\t(5,[2],[1.0])\t(35,[7],[1.0])\t0\t1\t0\t0.2\t4.65\n[13.3,25.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t13.3\t25.55\n[-21.7,18.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-21.7\t18.65\n[-21.5,20.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-21.5\t20.35\n[-24.5,6.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-24.5\t6.55\n[-13.2,30.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-13.2\t30.95\n[-0.7,5.45]\t1\t(5,[3],[1.0])\t(35,[14],[1.0])\t0\t1\t0\t-0.7\t5.45\n[6.3,30.15]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t6.3\t30.15\n[9.1,28.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t9.1\t28.65\n[-14.2,26.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.2\t26.25\n[4.3,28.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.3\t28.95\n[9.2,28.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t9.2\t28.45\n[-1.9,5.45]\t0\t(5,[1],[1.0])\t(35,[14],[1.0])\t0\t1\t0\t-1.9\t5.45\n[-0.6,5.45]\t1\t(5,[1],[1.0])\t(35,[19],[1.0])\t0\t1\t0\t-0.6\t5.45\n[-9.9,21.15]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t7\t-9.9\t21.15\n[-19.6,16.35]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-19.6\t16.35\n[-15.6,25.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.6\t25.55\n[10.9,23.25]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t10.9\t23.25\n[11.2,9.05]\t0\t(5,[3],[1.0])\t(35,[16],[1.0])\t0\t1\t1\t11.2\t9.05\n[-2.0,5.65]\t0\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-2.0\t5.65\n[-8.6,5.25]\t1\t(5,[3],[1.0])\t(35,[18],[1.0])\t0\t1\t0\t-8.6\t5.25\n[-12.0,28.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-12.0\t28.45\n[1.7,30.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t1.7\t30.15\n[13.7,25.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t13.7\t25.55\n[0.0,5.35]\t1\t(5,[3],[1.0])\t(35,[25],[1.0])\t0\t1\t0\t0.0\t5.35\n[4.0,30.45]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.0\t30.45\n[17.3,23.55]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t17.3\t23.55\n[11.4,26.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t11.4\t26.55\n[13.7,28.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t13.7\t28.45\n[-1.6,31.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-1.6\t31.15\n[-15.1,18.15]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t7\t-15.1\t18.15\n[9.7,28.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t9.7\t28.95\n[12.7,26.25]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t12.7\t26.25\n[9.9,32.15]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t9.9\t32.15\n[11.7,51.95]\t1\t(5,[2],[1.0])\t(35,[12],[1.0])\t1\t0\t9\t11.7\t51.95\n[8.4,28.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t8.4\t28.45\n[10.5,28.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t10.5\t28.05\n[22.8,9.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t18\t22.8\t9.35\n[-22.8,7.05]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-22.8\t7.05\n[8.2,30.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t8.2\t30.65\n[-15.3,28.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t11\t-15.3\t28.15\n[2.0,5.95]\t1\t(5,[4],[1.0])\t(35,[8],[1.0])\t1\t0\t14\t2.0\t5.95\n[0.1,18.35]\t1\t(5,[4],[1.0])\t(35,[6],[1.0])\t1\t0\t8\t0.1\t18.35\n[11.4,28.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t11.4\t28.05\n[-23.3,7.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-23.3\t7.05\n[0.1,6.55]\t1\t(5,[4],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t0.1\t6.55\n[-23.8,8.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-23.8\t8.35\n[4.0,32.95]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t4.0\t32.95\n[0.0,6.35]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t0.0\t6.35\n[-16.9,25.75]\t1\t(5,[1],[1.0])\t(35,[10],[1.0])\t1\t0\t11\t-16.9\t25.75\n[-0.1,7.85]\t0\t(5,[1],[1.0])\t(35,[8],[1.0])\t1\t0\t0\t-0.1\t7.85\n[1.7,9.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t14\t1.7\t9.35\n[22.7,8.55]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t18\t22.7\t8.55\n[0.2,7.85]\t1\t(5,[1],[1.0])\t(35,[4],[1.0])\t1\t0\t0\t0.2\t7.85\n[-2.5,14.95]\t1\t(5,[2],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t-2.5\t14.95\n[18.1,16.25]\t1\t(5,[2],[1.0])\t(35,[2],[1.0])\t1\t0\t13\t18.1\t16.25\n[-2.0,6.15]\t0\t(5,[2],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-2.0\t6.15\n[0.2,17.65]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t1\t0\t8\t0.2\t17.65\n[1.4,30.95]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t1.4\t30.95\n[-4.0,32.55]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-4.0\t32.55\n[8.9,29.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t8.9\t29.15\n[-1.1,6.85]\t0\t(5,[3],[1.0])\t(35,[7],[1.0])\t1\t0\t0\t-1.1\t6.85\n[2.4,8.35]\t1\t(5,[3],[1.0])\t(35,[23],[1.0])\t1\t0\t14\t2.4\t8.35\n[-12.4,31.15]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-12.4\t31.15\n[2.5,8.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t14\t2.5\t8.35\n[23.0,5.15]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t18\t23.0\t5.15\n[10.1,21.75]\t0\t(5,[1],[1.0])\t(35,[10],[1.0])\t1\t0\t19\t10.1\t21.75\n[-10.9,31.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-10.9\t31.95\n[-22.7,10.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-22.7\t10.35\n[-23.3,7.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-23.3\t7.55\n[1.0,6.85]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t1\t0\t14\t1.0\t6.85\n[10.9,18.35]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t19\t10.9\t18.35\n[-23.7,5.55]\t0\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-23.7\t5.55\n[10.9,23.25]\t0\t(5,[2],[1.0])\t(35,[10],[1.0])\t1\t0\t19\t10.9\t23.25\n[18.6,22.15]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t18.6\t22.15\n[2.2,31.45]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t2.2\t31.45\n[15.3,29.45]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t5\t15.3\t29.45\n[-9.4,9.85]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t7\t-9.4\t9.85\n[23.2,14.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t23.2\t14.25\n[-23.5,6.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t6.65\n[-17.8,22.65]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-17.8\t22.65\n[4.2,4.65]\t1\t(5,[1],[1.0])\t(35,[16],[1.0])\t0\t1\t14\t4.2\t4.65\n[-23.7,8.35]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.7\t8.35\n[4.8,30.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.8\t30.45\n[-8.4,29.15]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t2\t-8.4\t29.15\n[-1.4,4.15]\t1\t(5,[2],[1.0])\t(35,[20],[1.0])\t0\t1\t0\t-1.4\t4.15\n[0.4,7.85]\t1\t(5,[3],[1.0])\t(35,[19],[1.0])\t0\t1\t14\t0.4\t7.85\n[1.0,32.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t1.0\t32.15\n[-0.2,31.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t-0.2\t31.15\n[-1.6,30.95]\t1\t(5,[4],[1.0])\t(35,[2],[1.0])\t0\t1\t4\t-1.6\t30.95\n[-1.9,4.15]\t0\t(5,[4],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-1.9\t4.15\n[-1.0,5.75]\t0\t(5,[4],[1.0])\t(35,[32],[1.0])\t0\t1\t0\t-1.0\t5.75\n[5.0,9.35]\t0\t(5,[4],[1.0])\t(35,[15],[1.0])\t0\t1\t14\t5.0\t9.35\n[-7.3,29.45]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-7.3\t29.45\n[1.0,33.05]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t4\t1.0\t33.05\n[0.6,5.25]\t1\t(5,[4],[1.0])\t(35,[9],[1.0])\t0\t1\t14\t0.6\t5.25\n[11.9,30.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t11.9\t30.45\n[-15.0,25.25]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.0\t25.25\n[-5.5,23.05]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t8\t-5.5\t23.05\n[0.2,6.35]\t1\t(5,[1],[1.0])\t(35,[19],[1.0])\t0\t1\t0\t0.2\t6.35\n[-23.8,10.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.8\t10.35\n[-23.2,3.35]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.2\t3.35\n[-10.6,26.65]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-10.6\t26.65\n[9.1,29.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t9.1\t29.95\n[-4.5,8.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t0\t-4.5\t8.55\n[-13.3,25.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-13.3\t25.55\n[-9.4,13.45]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t7\t-9.4\t13.45\n[-2.4,6.55]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-2.4\t6.55\n[10.9,28.05]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t10.9\t28.05\n[-0.7,5.25]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-0.7\t5.25\n[-13.7,25.55]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-13.7\t25.55\n[-16.8,27.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-16.8\t27.05\n[4.3,30.95]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t10\t4.3\t30.95\n[15.1,27.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t15.1\t27.05\n[-21.9,17.65]\t1\t(5,[1],[1.0])\t(35,[2],[1.0])\t0\t1\t12\t-21.9\t17.65\n[19.5,25.05]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t15\t19.5\t25.05\n[-12.2,28.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-12.2\t28.05\n[0.9,3.65]\t1\t(5,[1],[1.0])\t(35,[8],[1.0])\t0\t1\t14\t0.9\t3.65\n[-4.8,29.15]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t-4.8\t29.15\n[-23.3,5.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.3\t5.55\n[-14.8,25.75]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t11\t-14.8\t25.75\n[-1.6,30.45]\t1\t(5,[1],[1.0])\t(35,[10],[1.0])\t0\t1\t4\t-1.6\t30.45\n[11.2,22.65]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t19\t11.2\t22.65\n[-0.7,5.25]\t1\t(5,[2],[1.0])\t(35,[17],[1.0])\t0\t1\t0\t-0.7\t5.25\n[0.4,3.65]\t1\t(5,[2],[1.0])\t(35,[5],[1.0])\t0\t1\t14\t0.4\t3.65\n[-0.1,5.55]\t1\t(5,[2],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t-0.1\t5.55\n[15.1,27.05]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t15.1\t27.05\n[14.2,22.85]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t14.2\t22.85\n[-1.6,6.55]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-1.6\t6.55\n[1.4,14.75]\t1\t(5,[3],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t1.4\t14.75\n[6.8,17.35]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t19\t6.8\t17.35\n[12.2,28.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.2\t28.15\n[-20.9,22.15]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-20.9\t22.15\n[20.7,25.55]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t6\t20.7\t25.55\n[-0.9,5.15]\t0\t(5,[3],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-0.9\t5.15\n[12.2,30.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t12.2\t30.95\n[11.9,7.85]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t1\t11.9\t7.85\n[-14.3,28.15]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-14.3\t28.15\n[-21.2,24.05]\t1\t(5,[4],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-21.2\t24.05\n[-0.4,5.45]\t1\t(5,[4],[1.0])\t(35,[3],[1.0])\t0\t1\t0\t-0.4\t5.45\n[-2.4,5.25]\t1\t(5,[4],[1.0])\t(35,[5],[1.0])\t0\t1\t0\t-2.4\t5.25\n[-18.6,22.75]\t0\t(5,[1],[1.0])\t(35,[18],[1.0])\t1\t0\t12\t-18.6\t22.75\n[12.8,16.75]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t19\t12.8\t16.75\n[-17.8,31.45]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-17.8\t31.45\n[3.2,30.95]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t10\t3.2\t30.95\n[0.0,7.35]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t0.0\t7.35\n[1.2,7.35]\t0\t(5,[1],[1.0])\t(35,[7],[1.0])\t1\t0\t14\t1.2\t7.35\n[7.4,29.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t7.4\t29.45\n[-1.2,30.95]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-1.2\t30.95\n[-0.5,26.95]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-0.5\t26.95\n[-14.2,14.25]\t1\t(5,[2],[1.0])\t(35,[2],[1.0])\t1\t0\t7\t-14.2\t14.25\n[2.7,21.75]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t8\t2.7\t21.75\n[-0.7,6.35]\t1\t(5,[3],[1.0])\t(35,[20],[1.0])\t1\t0\t0\t-0.7\t6.35\n[-6.3,12.95]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t7\t-6.3\t12.95\n[0.4,6.85]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t1\t0\t14\t0.4\t6.85\n[11.0,28.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t11.0\t28.45\n[-1.1,5.45]\t0\t(5,[3],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t-1.1\t5.45\n[-0.4,9.05]\t1\t(5,[3],[1.0])\t(35,[16],[1.0])\t1\t0\t0\t-0.4\t9.05\n[-9.6,28.45]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t2\t-9.6\t28.45\n[-0.4,6.35]\t0\t(5,[4],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t-0.4\t6.35\n[-2.5,7.85]\t0\t(5,[4],[1.0])\t(35,[16],[1.0])\t1\t0\t0\t-2.5\t7.85\n[-9.6,28.95]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-9.6\t28.95\n[-0.6,13.75]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t17\t-0.6\t13.75\n[1.4,6.35]\t1\t(5,[4],[1.0])\t(35,[3],[1.0])\t1\t0\t14\t1.4\t6.35\n[18.6,25.55]\t0\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t15\t18.6\t25.55\n[-0.7,8.05]\t1\t(5,[4],[1.0])\t(35,[5],[1.0])\t1\t0\t0\t-0.7\t8.05\n[13.3,16.35]\t1\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t19\t13.3\t16.35\n[-15.6,31.15]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t11\t-15.6\t31.15\n[1.2,6.85]\t1\t(5,[1],[1.0])\t(35,[13],[1.0])\t1\t0\t14\t1.2\t6.85\n[0.2,6.35]\t1\t(5,[1],[1.0])\t(35,[3],[1.0])\t1\t0\t0\t0.2\t6.35\n[-18.4,22.65]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-18.4\t22.65\n[-7.0,29.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-7.0\t29.45\n[-22.8,5.45]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t3\t-22.8\t5.45\n[-20.9,22.25]\t1\t(5,[1],[1.0])\t(35,[1],[1.0])\t1\t0\t12\t-20.9\t22.25\n[13.7,31.65]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t1\t0\t5\t13.7\t31.65\n[1.2,6.85]\t0\t(5,[2],[1.0])\t(35,[5],[1.0])\t1\t0\t14\t1.2\t6.85\n[-2.4,36.35]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-2.4\t36.35\n[0.9,10.45]\t0\t(5,[2],[1.0])\t(35,[6],[1.0])\t1\t0\t17\t0.9\t10.45\n[-2.0,5.55]\t1\t(5,[2],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t-2.0\t5.55\n[-3.0,30.65]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t4\t-3.0\t30.65\n[-24.0,5.95]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t3\t-24.0\t5.95\n[0.0,6.85]\t1\t(5,[3],[1.0])\t(35,[9],[1.0])\t1\t0\t0\t0.0\t6.85\n[5.5,30.45]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t10\t5.5\t30.45\n[2.2,6.85]\t1\t(5,[3],[1.0])\t(35,[20],[1.0])\t1\t0\t14\t2.2\t6.85\n[19.1,22.25]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t19.1\t22.25\n[-4.5,31.45]\t1\t(5,[3],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t-4.5\t31.45\n[-9.9,30.15]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t1\t0\t2\t-9.9\t30.15\n[21.0,22.15]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t21.0\t22.15\n[8.7,11.95]\t0\t(5,[4],[1.0])\t(35,[6],[1.0])\t1\t0\t1\t8.7\t11.95\n[20.7,22.15]\t0\t(5,[4],[1.0])\t(35,[0],[1.0])\t1\t0\t6\t20.7\t22.15\n[1.0,30.45]\t0\t(5,[4],[1.0])\t(35,[1],[1.0])\t1\t0\t4\t1.0\t30.45\n[12.7,5.15]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t1\t12.7\t5.15\n[23.8,7.85]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t18\t23.8\t7.85\n[14.1,25.75]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t14.1\t25.75\n[-6.8,8.85]\t1\t(5,[1],[1.0])\t(35,[27],[1.0])\t0\t1\t0\t-6.8\t8.85\n[-23.8,8.55]\t1\t(5,[1],[1.0])\t(35,[12],[1.0])\t0\t1\t3\t-23.8\t8.55\n[-1.7,29.45]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t-1.7\t29.45\n[11.9,31.65]\t1\t(5,[2],[1.0])\t(35,[2],[1.0])\t0\t1\t5\t11.9\t31.65\n[17.4,28.65]\t1\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t15\t17.4\t28.65\n[13.7,28.45]\t0\t(5,[2],[1.0])\t(35,[0],[1.0])\t0\t1\t5\t13.7\t28.45\n[1.4,9.85]\t0\t(5,[2],[1.0])\t(35,[30],[1.0])\t0\t1\t17\t1.4\t9.85\n[0.0,30.45]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t0\t1\t4\t0.0\t30.45\n[21.7,15.75]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t13\t21.7\t15.75\n[-23.0,15.75]\t0\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t12\t-23.0\t15.75\n[0.0,5.15]\t1\t(5,[3],[1.0])\t(35,[4],[1.0])\t0\t1\t0\t0.0\t5.15\n[-0.6,10.15]\t0\t(5,[3],[1.0])\t(35,[6],[1.0])\t0\t1\t17\t-0.6\t10.15\n[-0.7,7.55]\t0\t(5,[3],[1.0])\t(35,[26],[1.0])\t0\t1\t0\t-0.7\t7.55\n[0.6,5.15]\t1\t(5,[3],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t0.6\t5.15\n[1.9,5.45]\t1\t(5,[1],[1.0])\t(35,[7],[1.0])\t0\t1\t14\t1.9\t5.45\n[-9.6,27.55]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-9.6\t27.55\n[-8.9,29.45]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-8.9\t29.45\n[-11.0,27.05]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-11.0\t27.05\n[-23.5,8.55]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-23.5\t8.55\n[-22.7,5.95]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t3\t-22.7\t5.95\n[-2.7,5.45]\t1\t(5,[1],[1.0])\t(35,[8],[1.0])\t0\t1\t0\t-2.7\t5.45\n[-6.1,28.95]\t0\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t2\t-6.1\t28.95\n[2.5,5.15]\t0\t(5,[1],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t2.5\t5.15\n[1.0,9.35]\t0\t(5,[1],[1.0])\t(35,[6],[1.0])\t0\t1\t14\t1.0\t9.35\n[-15.5,23.75]\t1\t(5,[1],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-15.5\t23.75\n[11.0,18.35]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t19\t11.0\t18.35\n[-0.1,20.65]\t0\t(5,[1],[1.0])\t(35,[1],[1.0])\t0\t1\t8\t-0.1\t20.65\n[0.9,9.35]\t0\t(5,[2],[1.0])\t(35,[6],[1.0])\t0\t1\t14\t0.9\t9.35\n[1.7,5.45]\t1\t(5,[2],[1.0])\t(35,[3],[1.0])\t0\t1\t14\t1.7\t5.45\n[15.3,24.55]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t15\t15.3\t24.55\n[13.5,28.05]\t1\t(5,[2],[1.0])\t(35,[1],[1.0])\t0\t1\t5\t13.5\t28.05\n[19.5,20.15]\t0\t(5,[3],[1.0])\t(35,[1],[1.0])\t0\t1\t6\t19.5\t20.15\n[-12.7,26.25]\t1\t(5,[3],[1.0])\t(35,[0],[1.0])\t0\t1\t11\t-12.7\t26.25\n\u003c!--TABLE_COMMENT--\u003e\n\u003cfont color\u003dred\u003eResults are limited by 1000.\u003c/font\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491778975077_-1964498348",
      "id": "20170409-190255_1294008715",
      "dateCreated": "Apr 9, 2017 7:02:55 PM",
      "dateStarted": "Apr 16, 2017 9:34:20 PM",
      "dateFinished": "Apr 16, 2017 9:34:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Shooting percentage",
      "user": "anonymous",
      "dateUpdated": "Apr 9, 2017 8:52:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eShooting percentage\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491763723027_-1843053298",
      "id": "20170409-144843_1436329943",
      "dateCreated": "Apr 9, 2017 2:48:43 PM",
      "dateStarted": "Apr 9, 2017 8:52:51 PM",
      "dateFinished": "Apr 9, 2017 8:52:51 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val df_grouped \u003d output_1.groupBy(\"shot_zone_onehot\",\"period_onehot\",\"h\",\"v\",\"action_type_onehot\",\"shot_made_numeric\",\"features\").\nagg(count(\"*\").alias(\"shots\")).orderBy(\"shot_zone_onehot\",\"period_onehot\",\"h\",\"v\",\"action_type_onehot\",\"shot_made_numeric\")\ndf_grouped.show(2)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:48:20 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf_grouped: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [shot_zone_onehot: vector, period_onehot: vector ... 6 more fields]\n+----------------+-------------+---+---+------------------+-----------------+--------------------+-----+\n|shot_zone_onehot|period_onehot|  h|  v|action_type_onehot|shot_made_numeric|            features|shots|\n+----------------+-------------+---+---+------------------+-----------------+--------------------+-----+\n|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|                0|(64,[0,21,27,28],...|    2|\n|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[1],[1.0])|                1|(64,[0,21,27,29],...|    1|\n+----------------+-------------+---+---+------------------+-----------------+--------------------+-----+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491764436239_-852117443",
      "id": "20170409-150036_689321997",
      "dateCreated": "Apr 9, 2017 3:00:36 PM",
      "dateStarted": "Apr 16, 2017 10:48:20 PM",
      "dateFinished": "Apr 16, 2017 10:48:22 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val df_made_miss \u003d output_1.groupBy(\"shot_zone_onehot\",\"period_onehot\",\"h\",\"v\",\"action_type_onehot\",\"features\").agg(count(\"*\").alias(\"total\")).\norderBy(\"shot_zone_onehot\",\"period_onehot\",\"h\",\"v\",\"action_type_onehot\")\ndf_made_miss.show(2)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:48:49 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf_made_miss: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [shot_zone_onehot: vector, period_onehot: vector ... 5 more fields]\n+----------------+-------------+---+---+------------------+--------------------+-----+\n|shot_zone_onehot|period_onehot|  h|  v|action_type_onehot|            features|total|\n+----------------+-------------+---+---+------------------+--------------------+-----+\n|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|(64,[0,21,27,28],...|    2|\n|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[1],[1.0])|(64,[0,21,27,29],...|    1|\n+----------------+-------------+---+---+------------------+--------------------+-----+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491765080071_1565934684",
      "id": "20170409-151120_235610079",
      "dateCreated": "Apr 9, 2017 3:11:20 PM",
      "dateStarted": "Apr 16, 2017 10:48:49 PM",
      "dateFinished": "Apr 16, 2017 10:48:50 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// append the column \"total attempts\" to \"df_grouped\", drop duplicated columns.  Join key :\"features\"\nval df_joined \u003d df_grouped.join(df_made_miss, Seq(\"features\")).drop(df_made_miss(\"shot_zone_onehot\")).drop(df_made_miss(\"period_onehot\")).\ndrop(df_made_miss(\"h\")).drop(df_made_miss(\"v\")).drop(df_made_miss(\"action_type_onehot\"))",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:51:37 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf_joined: org.apache.spark.sql.DataFrame \u003d [features: vector, shot_made_numeric: int ... 7 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492303868634_-753967530",
      "id": "20170415-205108_1896260385",
      "dateCreated": "Apr 15, 2017 8:51:08 PM",
      "dateStarted": "Apr 16, 2017 10:51:37 PM",
      "dateFinished": "Apr 16, 2017 10:51:37 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "df_joined.show",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:51:46 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+-----------------+-----+----------------+-------------+---+---+------------------+-----+\n|            features|shot_made_numeric|shots|shot_zone_onehot|period_onehot|  h|  v|action_type_onehot|total|\n+--------------------+-----------------+-----+----------------+-------------+---+---+------------------+-----+\n|(64,[0,21,27,28],...|                0|    2|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|    2|\n|(64,[0,21,27,29],...|                1|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[1],[1.0])|    1|\n|(64,[0,21,27,31],...|                0|    3|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[3],[1.0])|    5|\n|(64,[0,21,27,31],...|                1|    2|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[3],[1.0])|    5|\n|(64,[0,21,27,32],...|                0|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[4],[1.0])|    4|\n|(64,[0,21,27,32],...|                1|    3|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[4],[1.0])|    4|\n|(64,[0,21,27,33],...|                0|    2|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[5],[1.0])|    3|\n|(64,[0,21,27,33],...|                1|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[5],[1.0])|    3|\n|(64,[0,21,27,35],...|                1|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[7],[1.0])|    1|\n|(64,[0,21,27,36],...|                0|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[8],[1.0])|    6|\n|(64,[0,21,27,36],...|                1|    5|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[8],[1.0])|    6|\n|(64,[0,21,27,37],...|                0|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[9],[1.0])|    3|\n|(64,[0,21,27,37],...|                1|    2|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[9],[1.0])|    3|\n|(64,[0,21,27,41],...|                1|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|   (36,[13],[1.0])|    1|\n|(64,[0,21,27,42],...|                0|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|   (36,[14],[1.0])|    2|\n|(64,[0,21,27,42],...|                1|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|   (36,[14],[1.0])|    2|\n|(64,[0,21,27,45],...|                1|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|   (36,[17],[1.0])|    1|\n|(64,[0,21,27,47],...|                0|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|   (36,[19],[1.0])|    3|\n|(64,[0,21,27,47],...|                1|    2|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|   (36,[19],[1.0])|    3|\n|(64,[0,21,27,55],...|                1|    1|  (20,[0],[1.0])|(6,[1],[1.0])|  0|  1|   (36,[27],[1.0])|    1|\n+--------------------+-----------------+-----+----------------+-------------+---+---+------------------+-----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492304805375_-1222102438",
      "id": "20170415-210645_69395437",
      "dateCreated": "Apr 15, 2017 9:06:45 PM",
      "dateStarted": "Apr 16, 2017 10:51:46 PM",
      "dateFinished": "Apr 16, 2017 10:51:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "df_joined.orderBy($\"total\".desc).show",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 1:07:31 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+--------------------+-----------------+-----+----------------+-------------+---+---+------------------+-----+\n|            features|shot_made_numeric|shots|shot_zone_onehot|period_onehot|  h|  v|action_type_onehot|total|\n+--------------------+-----------------+-----+----------------+-------------+---+---+------------------+-----+\n|(64,[11,23,27,28]...|                0|   12| (20,[11],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   20|\n|(64,[11,23,27,28]...|                1|    8| (20,[11],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   20|\n|(64,[11,21,27,28]...|                1|    6| (20,[11],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|   18|\n|(64,[11,21,27,28]...|                0|   12| (20,[11],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|   18|\n|(64,[3,21,27,28],...|                1|    8|  (20,[3],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|   17|\n|(64,[3,21,27,28],...|                0|    9|  (20,[3],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|   17|\n|(64,[12,23,27,28]...|                0|   10| (20,[12],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   16|\n|(64,[2,23,27,28],...|                0|   12|  (20,[2],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   16|\n|(64,[2,23,27,28],...|                1|    4|  (20,[2],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   16|\n|(64,[12,23,27,28]...|                1|    6| (20,[12],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   16|\n|(64,[15,23,27,28]...|                0|    8| (20,[15],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   15|\n|(64,[15,23,27,28]...|                1|    7| (20,[15],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   15|\n|(64,[6,23,27,28],...|                1|    7|  (20,[6],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   14|\n|(64,[2,21,26,28],...|                0|   10|  (20,[2],[1.0])|(6,[1],[1.0])|  1|  0|    (36,[0],[1.0])|   14|\n|(64,[6,23,27,28],...|                0|    7|  (20,[6],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[0],[1.0])|   14|\n|(64,[0,23,27,33],...|                1|    3|  (20,[0],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[5],[1.0])|   14|\n|(64,[0,23,27,33],...|                0|   11|  (20,[0],[1.0])|(6,[3],[1.0])|  0|  1|    (36,[5],[1.0])|   14|\n|(64,[2,21,26,28],...|                1|    4|  (20,[2],[1.0])|(6,[1],[1.0])|  1|  0|    (36,[0],[1.0])|   14|\n|(64,[2,21,27,28],...|                0|    6|  (20,[2],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|   13|\n|(64,[5,21,27,28],...|                0|   10|  (20,[5],[1.0])|(6,[1],[1.0])|  0|  1|    (36,[0],[1.0])|   13|\n+--------------------+-----------------+-----+----------------+-------------+---+---+------------------+-----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492405392959_-1139956478",
      "id": "20170417-010312_1177947547",
      "dateCreated": "Apr 17, 2017 1:03:12 AM",
      "dateStarted": "Apr 17, 2017 1:07:31 AM",
      "dateFinished": "Apr 17, 2017 1:07:40 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Calulate FG% for each feature\n//Define a udf to concatenate two passed in string values\nval getPercentage \u003d udf( (first: Float, second: Float) \u003d\u003e \"%.2f\".format(first / second).toDouble  )\n\n//use withColumn method to add a new column called newColName\nval df_FG \u003d df_joined.withColumn(\"FG%\", getPercentage($\"shots\", $\"total\")).select(\"features\",\"shot_made_numeric\",\"shots\",\"total\",\"FG%\")\ndf_FG.show()",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:22:46 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ngetPercentage: org.apache.spark.sql.expressions.UserDefinedFunction \u003d UserDefinedFunction(\u003cfunction2\u003e,DoubleType,Some(List(FloatType, FloatType)))\n\ndf_FG: org.apache.spark.sql.DataFrame \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\n+--------------------+-----------------+-----+-----+----+\n|            features|shot_made_numeric|shots|total| FG%|\n+--------------------+-----------------+-----+-----+----+\n|(64,[0,21,27,28],...|                0|    2|    2| 1.0|\n|(64,[0,21,27,29],...|                1|    1|    1| 1.0|\n|(64,[0,21,27,31],...|                0|    3|    5| 0.6|\n|(64,[0,21,27,31],...|                1|    2|    5| 0.4|\n|(64,[0,21,27,32],...|                0|    1|    4|0.25|\n|(64,[0,21,27,32],...|                1|    3|    4|0.75|\n|(64,[0,21,27,33],...|                0|    2|    3|0.67|\n|(64,[0,21,27,33],...|                1|    1|    3|0.33|\n|(64,[0,21,27,35],...|                1|    1|    1| 1.0|\n|(64,[0,21,27,36],...|                0|    1|    6|0.17|\n|(64,[0,21,27,36],...|                1|    5|    6|0.83|\n|(64,[0,21,27,37],...|                0|    1|    3|0.33|\n|(64,[0,21,27,37],...|                1|    2|    3|0.67|\n|(64,[0,21,27,41],...|                1|    1|    1| 1.0|\n|(64,[0,21,27,42],...|                0|    1|    2| 0.5|\n|(64,[0,21,27,42],...|                1|    1|    2| 0.5|\n|(64,[0,21,27,45],...|                1|    1|    1| 1.0|\n|(64,[0,21,27,47],...|                0|    1|    3|0.33|\n|(64,[0,21,27,47],...|                1|    2|    3|0.67|\n|(64,[0,21,27,55],...|                1|    1|    1| 1.0|\n+--------------------+-----------------+-----+-----+----+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491796004265_-1924079309",
      "id": "20170409-234644_1967726486",
      "dateCreated": "Apr 9, 2017 11:46:44 PM",
      "dateStarted": "Apr 16, 2017 11:22:46 PM",
      "dateFinished": "Apr 16, 2017 11:22:52 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# add rows with all-miss situations",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 7:11:04 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eadd rows with all-miss situations\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492384226460_-544306657",
      "id": "20170416-191026_412525709",
      "dateCreated": "Apr 16, 2017 7:10:26 PM",
      "dateStarted": "Apr 16, 2017 7:11:04 PM",
      "dateFinished": "Apr 16, 2017 7:11:06 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// filter rows where all shots are missed\nval df_filtered \u003d df_FG.filter($\"shot_made_numeric\" \u003d\u003d\u003d 0 \u0026\u0026 $\"FG%\" \u003d\u003d\u003d 1 ).toDF(\"features\", \"shot_made_numeric\",\"shots\",\"total\",\"FG%\")\ndf_filtered.show(2)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:23:09 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf_filtered: org.apache.spark.sql.DataFrame \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\n+--------------------+-----------------+-----+-----+---+\n|            features|shot_made_numeric|shots|total|FG%|\n+--------------------+-----------------+-----+-----+---+\n|(64,[0,21,27,28],...|                0|    2|    2|1.0|\n|(64,[0,21,26,28],...|                0|    2|    2|1.0|\n+--------------------+-----------------+-----+-----+---+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492325297501_417097113",
      "id": "20170416-024817_1516061717",
      "dateCreated": "Apr 16, 2017 2:48:17 AM",
      "dateStarted": "Apr 16, 2017 11:23:09 PM",
      "dateFinished": "Apr 16, 2017 11:23:14 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// create a dataframe \"df_missall\" that adds records of \"made shots\" FG equals to  0\nval df_missall \u003d df_filtered.withColumn(\"shot_made_numeric\",lit(1)).withColumn(\"FG%\",lit(0)).withColumn(\"shots\",lit(0))\ndf_missall.show(2)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:23:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndf_missall: org.apache.spark.sql.DataFrame \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\n+--------------------+-----------------+-----+-----+---+\n|            features|shot_made_numeric|shots|total|FG%|\n+--------------------+-----------------+-----+-----+---+\n|(64,[0,21,27,28],...|                1|    0|    2|  0|\n|(64,[0,21,26,28],...|                1|    0|    2|  0|\n+--------------------+-----------------+-----+-----+---+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492374353044_-1131606078",
      "id": "20170416-162553_1233534496",
      "dateCreated": "Apr 16, 2017 4:25:53 PM",
      "dateStarted": "Apr 16, 2017 11:23:16 PM",
      "dateFinished": "Apr 16, 2017 11:23:21 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// concatenate \"df_missall\" to \"df_FG\"\nval dfUnion \u003d  df_FG.union(df_missall).toDF(\"features\", \"shot_made_numeric\",\"shots\",\"total\",\"FG%\")\ndfUnion.show(2)",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:59:20 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ndfUnion: org.apache.spark.sql.DataFrame \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\n+--------------------+-----------------+-----+-----+---+\n|            features|shot_made_numeric|shots|total|FG%|\n+--------------------+-----------------+-----+-----+---+\n|(64,[0,21,27,28],...|                0|    2|    2|1.0|\n|(64,[0,21,27,29],...|                1|    1|    1|1.0|\n+--------------------+-----------------+-----+-----+---+\nonly showing top 2 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492383362042_512696800",
      "id": "20170416-185602_1189490269",
      "dateCreated": "Apr 16, 2017 6:56:02 PM",
      "dateStarted": "Apr 17, 2017 12:59:20 AM",
      "dateFinished": "Apr 17, 2017 12:59:28 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "dfUnion.groupBy(\"total\").orderBy(\"total\")",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 1:01:16 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n\n\n\u003cconsole\u003e:176: error: value orderBy is not a member of org.apache.spark.sql.RelationalGroupedDataset\n       dfUnion.groupBy(\"total\").orderBy(\"total\")\n                                ^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492405114802_-88252199",
      "id": "20170417-005834_447397456",
      "dateCreated": "Apr 17, 2017 12:58:34 AM",
      "dateStarted": "Apr 17, 2017 1:01:16 AM",
      "dateFinished": "Apr 17, 2017 1:01:16 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Split the data into training and test sets (30% held out for testing)  ",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 10:58:32 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eSplit the data into training and test sets (30% held out for testing)\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492397898196_225307608",
      "id": "20170416-225818_678407008",
      "dateCreated": "Apr 16, 2017 10:58:18 PM",
      "dateStarted": "Apr 16, 2017 10:58:32 PM",
      "dateFinished": "Apr 16, 2017 10:58:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "println(\"Total records:\", dfUnion.count())",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:04:33 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(Total records:,902)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492398171402_1941686131",
      "id": "20170416-230251_204273613",
      "dateCreated": "Apr 16, 2017 11:02:51 PM",
      "dateStarted": "Apr 16, 2017 11:03:18 PM",
      "dateFinished": "Apr 16, 2017 11:03:28 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val Array(trainingData, testData) \u003ddfUnion.randomSplit(Array(0.7, 0.3))  ",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:23:38 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\n\ntrainingData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\ntestData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1491792977435_-63149570",
      "id": "20170409-225617_1192572685",
      "dateCreated": "Apr 9, 2017 10:56:17 PM",
      "dateStarted": "Apr 16, 2017 11:23:38 PM",
      "dateFinished": "Apr 16, 2017 11:23:38 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Split data into training (60%) and test (40%).\nval splits \u003d dfUnion.randomSplit(Array(0.6, 0.4), seed \u003d 11L)\nval training \u003d splits(0).cache()\nval test \u003d splits(1)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:59:42 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nsplits: Array[org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]] \u003d Array([features: vector, shot_made_numeric: int ... 3 more fields], [features: vector, shot_made_numeric: int ... 3 more fields])\n\ntraining: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\n\ntest: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] \u003d [features: vector, shot_made_numeric: int ... 3 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492401553170_-1023683447",
      "id": "20170416-235913_135104331",
      "dateCreated": "Apr 16, 2017 11:59:13 PM",
      "dateStarted": "Apr 16, 2017 11:59:42 PM",
      "dateFinished": "Apr 16, 2017 11:59:47 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Machine learning",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:05:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eMachine learning\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492397943478_-179170755",
      "id": "20170416-225903_389759183",
      "dateCreated": "Apr 16, 2017 10:59:03 PM",
      "dateStarted": "Apr 16, 2017 11:05:45 PM",
      "dateFinished": "Apr 16, 2017 11:05:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 1. Random forest\n",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:06:02 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e1. Random forest\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492398345500_1934454168",
      "id": "20170416-230545_1558778178",
      "dateCreated": "Apr 16, 2017 11:05:45 PM",
      "dateStarted": "Apr 16, 2017 11:05:59 PM",
      "dateFinished": "Apr 16, 2017 11:05:59 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val rf \u003d new RandomForestClassifier()\n             .setLabelCol(\"FG%\")                                                                                                      \n             .setFeaturesCol(\"features\")    \nrf.setMaxDepth(20)\nval rfmodel \u003d rf.fit(trainingData)\n                                                                                                           \n ",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:11:29 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nrf: org.apache.spark.ml.classification.RandomForestClassifier \u003d rfc_699108947556\n\nres90: rf.type \u003d rfc_699108947556\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norg.apache.spark.SparkException: Job aborted due to stage failure: Task 3 in stage 2868.0 failed 1 times, most recent failure: Lost task 3.0 in stage 2868.0 (TID 20184, localhost, executor driver): java.lang.IllegalArgumentException: requirement failed: Classifier was given dataset with invalid label 0.6666666865348816.  Labels must be integers in range [0, 2).\n\tat scala.Predef$.require(Predef.scala:224)\n\tat org.apache.spark.ml.classification.Classifier$$anonfun$extractLabeledPoints$2.apply(Classifier.scala:84)\n\tat org.apache.spark.ml.classification.Classifier$$anonfun$extractLabeledPoints$2.apply(Classifier.scala:82)\n\tat scala.collection.Iterator$$anon$11.next(Iterator.scala:409)\n\tat org.apache.spark.util.Utils$.getIteratorSize(Utils.scala:1762)\n\tat org.apache.spark.rdd.RDD$$anonfun$count$1.apply(RDD.scala:1157)\n\tat org.apache.spark.rdd.RDD$$anonfun$count$1.apply(RDD.scala:1157)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:1944)\n\tat org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:1944)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:99)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:282)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nDriver stacktrace:\n  at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1435)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1423)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1422)\n  at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n  at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1422)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802)\n  at scala.Option.foreach(Option.scala:257)\n  at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:802)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1650)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1605)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1594)\n  at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:628)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1918)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1931)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1944)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:1958)\n  at org.apache.spark.rdd.RDD.count(RDD.scala:1157)\n  at org.apache.spark.ml.tree.impl.DecisionTreeMetadata$.buildMetadata(DecisionTreeMetadata.scala:116)\n  at org.apache.spark.ml.tree.impl.RandomForest$.run(RandomForest.scala:105)\n  at org.apache.spark.ml.classification.RandomForestClassifier.train(RandomForestClassifier.scala:137)\n  at org.apache.spark.ml.classification.RandomForestClassifier.train(RandomForestClassifier.scala:45)\n  at org.apache.spark.ml.Predictor.fit(Predictor.scala:96)\n  ... 50 elided\nCaused by: java.lang.IllegalArgumentException: requirement failed: Classifier was given dataset with invalid label 0.6666666865348816.  Labels must be integers in range [0, 2).\n  at scala.Predef$.require(Predef.scala:224)\n  at org.apache.spark.ml.classification.Classifier$$anonfun$extractLabeledPoints$2.apply(Classifier.scala:84)\n  at org.apache.spark.ml.classification.Classifier$$anonfun$extractLabeledPoints$2.apply(Classifier.scala:82)\n  at scala.collection.Iterator$$anon$11.next(Iterator.scala:409)\n  at org.apache.spark.util.Utils$.getIteratorSize(Utils.scala:1762)\n  at org.apache.spark.rdd.RDD$$anonfun$count$1.apply(RDD.scala:1157)\n  at org.apache.spark.rdd.RDD$$anonfun$count$1.apply(RDD.scala:1157)\n  at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:1944)\n  at org.apache.spark.SparkContext$$anonfun$runJob$5.apply(SparkContext.scala:1944)\n  at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:87)\n  at org.apache.spark.scheduler.Task.run(Task.scala:99)\n  at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:282)\n  ... 3 more\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492398359253_-736457373",
      "id": "20170416-230559_243780214",
      "dateCreated": "Apr 16, 2017 11:05:59 PM",
      "dateStarted": "Apr 16, 2017 11:11:29 PM",
      "dateFinished": "Apr 16, 2017 11:11:48 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nIn regression it is recommended that the input variables have a mean of 0. It\u0027s easy to achieve by using the StandardScaler from Spark MLLib.",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:37:16 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eIn regression it is recommended that the input variables have a mean of 0. It\u0026rsquo;s easy to achieve by using the StandardScaler from Spark MLLib.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492398446730_-1109785875",
      "id": "20170416-230726_171818422",
      "dateCreated": "Apr 16, 2017 11:07:26 PM",
      "dateStarted": "Apr 16, 2017 11:37:16 PM",
      "dateFinished": "Apr 16, 2017 11:37:16 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val scaler \u003d new StandardScaler()\n    .setInputCol(\"features\")\n    .setOutputCol(\"scaledFeatures\")\n    .setWithStd(true)\n    .setWithMean(false)\n\n// Compute summary statistics by fitting the StandardScaler.\nval scalerModel \u003d scaler.fit(trainingData)",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:51:17 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nscaler: org.apache.spark.ml.feature.StandardScaler \u003d stdScal_bb7e11a610a7\n\nscalerModel: org.apache.spark.ml.feature.StandardScalerModel \u003d stdScal_bb7e11a610a7\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492400236302_2042632074",
      "id": "20170416-233716_462472404",
      "dateCreated": "Apr 16, 2017 11:37:16 PM",
      "dateStarted": "Apr 16, 2017 11:51:17 PM",
      "dateFinished": "Apr 16, 2017 11:51:26 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Normalize each feature to have unit standard deviation.\nval scaledData \u003d scalerModel.transform(trainingData)\n",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:51:34 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nscaledData: org.apache.spark.sql.DataFrame \u003d [features: vector, shot_made_numeric: int ... 4 more fields]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492400335593_-1433635536",
      "id": "20170416-233855_628993247",
      "dateCreated": "Apr 16, 2017 11:38:55 PM",
      "dateStarted": "Apr 16, 2017 11:51:34 PM",
      "dateFinished": "Apr 16, 2017 11:51:34 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## linear regression",
      "user": "anonymous",
      "dateUpdated": "Apr 16, 2017 11:56:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003elinear regression\u003c/h2\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492400813638_2019457592",
      "id": "20170416-234653_1965732174",
      "dateCreated": "Apr 16, 2017 11:46:53 PM",
      "dateStarted": "Apr 16, 2017 11:56:30 PM",
      "dateFinished": "Apr 16, 2017 11:56:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.ml.regression.LinearRegression\n\nval lr \u003d new LinearRegression()\n  .setMaxIter(10)\n  .setRegParam(0.3)\n  .setElasticNetParam(0.8)\n  .setLabelCol(\"FG%\")                                                                                                      \n  .setFeaturesCol(\"features\")    \n\n// Fit the model\nval lrModel \u003d lr.fit(scaledData)",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:07:43 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport org.apache.spark.ml.regression.LinearRegression\n\nlr: org.apache.spark.ml.regression.LinearRegression \u003d linReg_ededa4aa1082\n\nlrModel: org.apache.spark.ml.regression.LinearRegressionModel \u003d linReg_ededa4aa1082\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492401390006_-353060657",
      "id": "20170416-235630_1453932728",
      "dateCreated": "Apr 16, 2017 11:56:30 PM",
      "dateStarted": "Apr 17, 2017 12:07:43 AM",
      "dateFinished": "Apr 17, 2017 12:08:19 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// Print the coefficients and intercept for linear regression\nprintln(s\"Coefficients: ${lrModel.coefficients} Intercept: ${lrModel.intercept}\")\n\n// Summarize the model over the training set and print out some metrics\nval trainingSummary \u003d lrModel.summary\nprintln(s\"numIterations: ${trainingSummary.totalIterations}\")\nprintln(s\"objectiveHistory: [${trainingSummary.objectiveHistory.mkString(\",\")}]\")\ntrainingSummary.residuals.show()\nprintln(s\"RMSE: ${trainingSummary.rootMeanSquaredError}\")\nprintln(s\"r2: ${trainingSummary.r2}\")",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:08:22 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Coefficients: [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0] Intercept: 0.6263373860182371\n\ntrainingSummary: org.apache.spark.ml.regression.LinearRegressionTrainingSummary \u003d org.apache.spark.ml.regression.LinearRegressionTrainingSummary@a56cd0b\nnumIterations: 1\nobjectiveHistory: [0.5000000000000002]\n+--------------------+\n|           residuals|\n+--------------------+\n|  0.3736626139817629|\n|  0.3736626139817629|\n|-0.02633738601823...|\n| 0.12366261398176293|\n|  0.3736626139817629|\n|-0.45633738601823703|\n| 0.20366261398176289|\n|-0.29633738601823706|\n|  0.3736626139817629|\n|-0.12633738601823707|\n|  0.3736626139817629|\n|-0.29633738601823706|\n|  0.3736626139817629|\n| -0.3363373860182371|\n|  0.3736626139817629|\n|  0.3736626139817629|\n| -0.3963373860182371|\n| 0.14366261398176294|\n|  0.3736626139817629|\n|-0.12633738601823707|\n+--------------------+\nonly showing top 20 rows\n\nRMSE: 0.38932697188083054\nr2: -3.3306690738754696E-15\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492401467822_1801841312",
      "id": "20170416-235747_1507564054",
      "dateCreated": "Apr 16, 2017 11:57:47 PM",
      "dateStarted": "Apr 17, 2017 12:08:22 AM",
      "dateFinished": "Apr 17, 2017 12:08:31 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.ml.regression.GeneralizedLinearRegression\n\nval glr \u003d new GeneralizedLinearRegression()\n  .setFamily(\"gaussian\")\n  .setLink(\"identity\")\n  .setMaxIter(10)\n  .setRegParam(0.3)\n  .setLabelCol(\"FG%\")                                                                                                      \n  .setFeaturesCol(\"features\")    \n\n// Fit the model\nval model \u003d glr.fit(scaledData)\n\n// Print the coefficients and intercept for generalized linear regression model\nprintln(s\"Coefficients: ${model.coefficients}\")\nprintln(s\"Intercept: ${model.intercept}\")\n\n// Summarize the model over the training set and print out some metrics\nval summary \u003d model.summary\nprintln(s\"Coefficient Standard Errors: ${summary.coefficientStandardErrors.mkString(\",\")}\")\nprintln(s\"T Values: ${summary.tValues.mkString(\",\")}\")\nprintln(s\"P Values: ${summary.pValues.mkString(\",\")}\")\nprintln(s\"Dispersion: ${summary.dispersion}\")\nprintln(s\"Null Deviance: ${summary.nullDeviance}\")\nprintln(s\"Residual Degree Of Freedom Null: ${summary.residualDegreeOfFreedomNull}\")\nprintln(s\"Deviance: ${summary.deviance}\")\nprintln(s\"Residual Degree Of Freedom: ${summary.residualDegreeOfFreedom}\")\nprintln(s\"AIC: ${summary.aic}\")\nprintln(\"Deviance Residuals: \")\nsummary.residuals().show()",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:11:44 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport org.apache.spark.ml.regression.GeneralizedLinearRegression\n\nglr: org.apache.spark.ml.regression.GeneralizedLinearRegression \u003d glm_1c9948145702\n\nmodel: org.apache.spark.ml.regression.GeneralizedLinearRegressionModel \u003d glm_1c9948145702\nCoefficients: [0.016476020841012025,-0.014720805028783705,0.028513283174733426,0.028022665801984578,-0.008554277246997349,0.011144322888267801,-0.004444584010571512,-0.02935575781876397,0.024425248999342133,-0.02460297162585,0.008962062261596423,-0.0038836554909008267,0.018119359129518314,-0.043494882184306694,-0.014421002151339398,0.005138446936458354,0.06721515918723377,0.0067500521767514966,-0.02933573937523561,-0.009232601982222782,0.0,-0.0193095488339568,0.002163127740723755,-0.0013918745531202462,0.021533483248880443,0.011311749523440528,-0.003918085218857147,0.003918085218858188,-0.07618264932902519,0.02879079306316293,0.029931336547737046,-0.03932441027446007,0.03579242491316384,-0.045135801432593235,-0.05624822236688116,0.052225598837706055,0.07509258731314238,0.02614360397071385,0.060316622123302334,-0.00429650438785442,0.05146083418795385,0.20701395910953652,0.004842777248871183,-0.02526342016507505,-0.03507270219619208,-0.0046797011984774615,-0.035442803581771064,0.053205164955150826,0.12419755962279513,0.21360028369511982,0.05201684674338252,0.21415786801962355,-0.0071581036416994434,0.19116981409474165,-0.07601018031508483,0.21990601768199622,0.20631122874306213,0.029356512660104892,0.02285460494006943,0.20680917616024827,-0.38144064058821187,0.0,0.23271177104424196,0.20459907062002752]\nIntercept: 0.6329894639662913\n\nsummary: org.apache.spark.ml.regression.GeneralizedLinearRegressionTrainingSummary \u003d org.apache.spark.ml.regression.GeneralizedLinearRegressionTrainingSummary@79e6f0f6\nCoefficient Standard Errors: 0.034981002381898045,0.06164990857726449,0.0558184373176239,0.0627009946554175,0.05748574232927515,0.058393908136328845,0.05667493006436256,0.04988264671717208,0.07417209083358582,0.1147486295057262,0.06266339840609864,0.05598881001645153,0.057518902314140245,0.07170644969321781,0.03638019555190078,0.0593176722740209,0.1719886406938005,0.05418765253186771,0.06838460653076053,0.05126571312482734,Infinity,0.028830864530167002,0.03009919982010228,0.02864329714818475,0.03165168809267597,0.07083663824063036,0.028088317252942065,0.02808831725294207,0.027954416418192362,0.036660821764799546,0.03850273816458844,0.07242838877383465,0.07433557403090763,0.0723070941291752,0.05452170742821233,0.07254754617263233,0.08443954050934387,0.08439385959561285,0.06566320266806794,0.10026621088974533,0.07473068364687899,0.10634430172618668,0.09134821238918488,0.07857778731732469,0.081229108839967,0.1064397745359822,0.08145528228371102,0.1222393979443381,0.11359281458392191,0.21276193404557775,0.11399227051992389,0.1344203723919144,0.13433549443640033,0.21118555959689234,0.20994303388625932,0.21050310836497935,0.21036524160869297,0.17368653623136934,0.17390363702955,0.2966716719852741,0.2967860152920903,Infinity,0.2974102868583744,0.29764606098726865,0.04398720510411355\nT Values: 0.47099910577571186,-0.23878064653306727,0.5108219531923505,0.446925379030863,-0.14880693717059307,0.19084735452625987,-0.07842239956051195,-0.5884963960554696,0.32930511631582793,-0.21440754222360678,0.14301909072209212,-0.06936485147227935,0.31501573222936685,-0.6065686192858682,-0.3963970487944762,0.08662590319999487,0.3908116193958419,0.12456808629570724,-0.42898162120798206,-0.18009311525116675,0.0,-0.6697526816704497,0.0718666194999334,-0.04859337756821251,0.6803265337959392,0.15968783675214496,-0.13949163218194402,0.13949163218198105,-2.7252455636829724,0.7853286335989024,0.7773820246183258,-0.5429419450052206,0.4814979285460536,-0.6242236944546411,-1.0316665603501523,0.7198809827892914,0.8893059680355889,0.30978087856136993,0.9185756964704731,-0.04285096993022844,0.6886172008156523,1.9466389430300852,0.0530144720100132,-0.32150841895117876,-0.43177504588029314,-0.04396571881966434,-0.43511976863971563,0.43525382037121846,1.093357533904915,1.0039403178642026,0.4563190688818754,1.5931950210287134,-0.05328527409476554,0.9052219974682151,-0.36205145228235963,1.0446687433266482,0.9807286943668582,0.1690200823683813,0.1314210865882347,0.6970978212254578,-1.2852379186829486,0.0,0.7824603967214435,0.6873904863427,14.390308783385194\nP Values: 0.6378145852079027,0.8113581733937991,0.6096658486705742,0.6550921188168921,0.8817565658416564,0.8487105067840226,0.9375185106943056,0.55642322659443,0.742041353058821,0.8303029673999154,0.8863236862984709,0.9447225896330207,0.7528605244462234,0.5443693698463992,0.6919547408843401,0.9309981169220924,0.6960768485322635,0.9009077090714086,0.6680923961879597,0.8571409919425812,1.0,0.5032761610554635,0.9427322863899987,0.9612597091294544,0.49656324864109735,0.873181358183849,0.8891090292564918,0.8891090292564918,0.006615059146607871,0.4325745591795762,0.43724342318263587,0.5873737826391483,0.6303402827542015,0.5327207547054353,0.30264891998526666,0.4718819061062782,0.37419927462182256,0.7568364211401741,0.3586910162596415,0.9658347573612787,0.491333502601369,0.05204987302733377,0.9577382309716367,0.7479384235117474,0.6660618584057363,0.9649465300170439,0.6636338079463917,0.6635365686875971,0.2746807970814942,0.3158168580878047,0.6483276307932198,0.11164929832527948,0.9575225585984062,0.3657154183495539,0.717442561848614,0.29660175199807726,0.32712649090231105,0.865838481973572,0.8954867828908593,0.4860147656894136,0.1992108868022444,1.0,0.4342563856140971,0.4921054393033639,0.0\nDispersion: 0.15457705207566058\nNull Deviance: 99.73667310030423\nResidual Degree Of Freedom Null: 657\nDeviance: 91.66419188086672\nResidual Degree Of Freedom: 593\nAIC: 702.3569965040415\nDeviance Residuals: \n+--------------------+\n|   devianceResiduals|\n+--------------------+\n|  0.4421086281368205|\n|  0.3371351857446323|\n|0.005250389082255391|\n|  0.0801335538946315|\n| 0.31370037997008926|\n|  -0.539166608505347|\n| 0.12083339149465289|\n| -0.3302176251629186|\n| 0.15891201969825874|\n|-0.13891679844107585|\n|  0.3706056800062727|\n| -0.3572791861473555|\n| 0.44994479857453584|\n| -0.2969134404800294|\n| 0.14601996112579907|\n| 0.15911680264754702|\n| -0.4320302756676533|\n| 0.10796972433234675|\n| 0.41889795067810387|\n| -0.1784634495921954|\n+--------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492401899229_1626788785",
      "id": "20170417-000459_250016920",
      "dateCreated": "Apr 17, 2017 12:04:59 AM",
      "dateStarted": "Apr 17, 2017 12:11:44 AM",
      "dateFinished": "Apr 17, 2017 12:13:20 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n// Fit the model\nval model \u003d glr.fit(trainingData)\n\n// Print the coefficients and intercept for generalized linear regression model\nprintln(s\"Coefficients: ${model.coefficients}\")\nprintln(s\"Intercept: ${model.intercept}\")\n\n// Summarize the model over the training set and print out some metrics\nval summary \u003d model.summary\nprintln(s\"Coefficient Standard Errors: ${summary.coefficientStandardErrors.mkString(\",\")}\")\nprintln(s\"T Values: ${summary.tValues.mkString(\",\")}\")\nprintln(s\"P Values: ${summary.pValues.mkString(\",\")}\")\nprintln(s\"Dispersion: ${summary.dispersion}\")\nprintln(s\"Null Deviance: ${summary.nullDeviance}\")\nprintln(s\"Residual Degree Of Freedom Null: ${summary.residualDegreeOfFreedomNull}\")\nprintln(s\"Deviance: ${summary.deviance}\")\nprintln(s\"Residual Degree Of Freedom: ${summary.residualDegreeOfFreedom}\")\nprintln(s\"AIC: ${summary.aic}\")\nprintln(\"Deviance Residuals: \")\nsummary.residuals().show()",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:18:11 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nmodel: org.apache.spark.ml.regression.GeneralizedLinearRegressionModel \u003d glm_1c9948145702\nCoefficients: [0.016476020841011914,-0.014720805028783838,0.028513283174733155,0.02802266580198441,-0.008554277246997475,0.011144322888267702,-0.004444584010571682,-0.029355757818764053,0.024425248999341932,-0.02460297162585029,0.008962062261596297,-0.003883655490901081,0.018119359129518117,-0.043494882184306874,-0.014421002151339518,0.005138446936458202,0.0672151591872336,0.006750052176751235,-0.029335739375235717,-0.009232601982222874,0.0,-0.01930954883395727,0.0021631277407235514,-0.0013918745531204687,0.021533483248880075,0.011311749523440277,-0.003918085218856688,0.003918085218858407,-0.07618264932902534,0.028790793063162762,0.029931336547737046,-0.03932441027446016,0.035792424913163715,-0.04513580143259337,-0.05624822236688112,0.05222559883770596,0.07509258731314217,0.026143603970713636,0.06031662212330216,-0.004296504387854511,0.05146083418795374,0.2070139591095361,0.004842777248871087,-0.025263420165075184,-0.03507270219619218,-0.00467970119847757,-0.03544280358177112,0.05320516495515067,0.12419755962279487,0.21360028369511955,0.052016846743382375,0.21415786801962297,-0.007158103641699602,0.1911698140947412,-0.07601018031508497,0.21990601768199594,0.2063112287430618,0.029356512660104587,0.02285460494006932,0.20680917616024835,-0.38144064058821187,0.0,0.23271177104424182,0.20459907062002727]\nIntercept: 0.6329894639662916\n\nsummary: org.apache.spark.ml.regression.GeneralizedLinearRegressionTrainingSummary \u003d org.apache.spark.ml.regression.GeneralizedLinearRegressionTrainingSummary@386b691\nCoefficient Standard Errors: 0.034981002381898024,0.06164990857726447,0.05581843731762388,0.06270099465541748,0.057485742329275134,0.05839390813632883,0.05667493006436255,0.049882646717172054,0.0741720908335858,0.11474862950572616,0.06266339840609862,0.055988810016451514,0.05751890231414022,0.07170644969321777,0.03638019555190075,0.05931767227402088,0.17198864069380043,0.05418765253186769,0.0683846065307605,0.05126571312482732,Infinity,0.028830864530166995,0.030099199820102267,0.028643297148184733,0.03165168809267595,0.07083663824063033,0.028088317252942044,0.02808831725294205,0.02795441641819235,0.03666082176479953,0.03850273816458842,0.0724283887738346,0.0743355740309076,0.07230709412917519,0.05452170742821231,0.0725475461726323,0.08443954050934382,0.08439385959561281,0.06566320266806791,0.10026621088974527,0.07473068364687896,0.10634430172618664,0.09134821238918485,0.07857778731732465,0.08122910883996698,0.10643977453598216,0.08145528228371099,0.12223939794433804,0.11359281458392188,0.2127619340455777,0.1139922705199238,0.13442037239191434,0.13433549443640025,0.21118555959689223,0.2099430338862592,0.21050310836497926,0.2103652416086929,0.17368653623136923,0.17390363702954992,0.296671671985274,0.29678601529209026,Infinity,0.29741028685837434,0.29764606098726853,0.043987205104113525\nT Values: 0.4709991057757089,-0.23878064653306952,0.5108219531923459,0.44692537903086044,-0.1488069371705953,0.1908473545262582,-0.07842239956051497,-0.5884963960554715,0.3293051163158253,-0.21440754222360936,0.14301909072209013,-0.06936485147228391,0.3150157322293636,-0.606568619285871,-0.3963970487944798,0.08662590319999235,0.3908116193958411,0.12456808629570246,-0.4289816212079838,-0.1800931152511686,0.0,-0.6697526816704662,0.07186661949992669,-0.048593377568220304,0.680326533795928,0.15968783675214146,-0.13949163218192778,0.13949163218198896,-2.725245563682979,0.7853286335988982,0.7773820246183263,-0.5429419450052222,0.4814979285460521,-0.6242236944546431,-1.031666560350152,0.7198809827892904,0.8893059680355869,0.30978087856136755,0.9185756964704709,-0.04285096993022937,0.688617200815651,1.9466389430300821,0.05301447201001217,-0.32150841895118065,-0.4317750458802945,-0.04396571881966537,-0.43511976863971646,0.4352538203712174,1.093357533904913,1.0039403178642015,0.45631906888187446,1.5931950210287098,-0.05328527409476676,0.9052219974682134,-0.3620514522823605,1.0446687433266473,0.9807286943668568,0.16902008236837968,0.13142108658823415,0.6970978212254584,-1.2852379186829488,0.0,0.7824603967214432,0.6873904863426994,14.39030878338521\nP Values: 0.6378145852079027,0.8113581733937991,0.6096658486705742,0.6550921188168921,0.8817565658416564,0.8487105067840226,0.9375185106943056,0.55642322659443,0.742041353058821,0.8303029673999154,0.8863236862984709,0.9447225896330207,0.7528605244462234,0.5443693698463992,0.6919547408843401,0.9309981169223942,0.6960768485322635,0.9009077090714086,0.6680923961879597,0.8571409919425812,1.0,0.5032761610554635,0.9427322863899987,0.9612597091294544,0.49656324864109735,0.873181358183849,0.8891090292564918,0.8891090292564918,0.006615059146607871,0.4325745591795762,0.43724342318263587,0.5873737826391483,0.6303402827542015,0.5327207547054353,0.30264891998526666,0.4718819061062782,0.37419927462182256,0.7568364211401741,0.3586910162596415,0.9658347573612787,0.491333502601369,0.052049873027338434,0.9577382309716367,0.7479384235117474,0.6660618584057363,0.9649465300170439,0.6636338079463917,0.6635365686875971,0.2746807970814942,0.3158168580878047,0.6483276307932198,0.11164929832527948,0.9575225585984062,0.3657154183495539,0.717442561848614,0.29660175199807726,0.32712649090231105,0.865838481973572,0.8954867828908593,0.4860147656894136,0.1992108868022444,1.0,0.4342563856140971,0.4921054393033639,0.0\nDispersion: 0.15457705207566053\nNull Deviance: 99.73667310030423\nResidual Degree Of Freedom Null: 657\nDeviance: 91.6641918808667\nResidual Degree Of Freedom: 593\nAIC: 702.3569965040411\nDeviance Residuals: \n+--------------------+\n|   devianceResiduals|\n+--------------------+\n|  0.4421086281368206|\n|  0.3371351857446325|\n|0.005250389082255502|\n| 0.08013355389463162|\n| 0.31370037997008937|\n| -0.5391666085053468|\n| 0.12083339149465311|\n|-0.33021762516291836|\n|  0.1589120196982592|\n|-0.13891679844107574|\n|  0.3706056800062729|\n| -0.3572791861473554|\n| 0.44994479857453573|\n| -0.2969134404800295|\n|  0.1460199611257994|\n|  0.1591168026475469|\n| -0.4320302756676533|\n| 0.10796972433234675|\n| 0.41889795067810376|\n| -0.1784634495921955|\n+--------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492402285495_-1404879306",
      "id": "20170417-001125_1126062705",
      "dateCreated": "Apr 17, 2017 12:11:25 AM",
      "dateStarted": "Apr 17, 2017 12:18:11 AM",
      "dateFinished": "Apr 17, 2017 12:19:48 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nimport org.apache.spark.ml.feature.{HashingTF, Tokenizer}\nimport org.apache.spark.ml.linalg.Vector\nimport org.apache.spark.ml.tuning.{CrossValidator, ParamGridBuilder}\nimport org.apache.spark.sql.Row\n\n// Prepare training data from a list of (id, text, label) tuples.\nval training \u003d spark.createDataFrame(Seq(\n  (0L, \"a b c d e spark\", 1.0),\n  (1L, \"b d\", 0.0),\n  (2L, \"spark f g h\", 1.0),\n  (3L, \"hadoop mapreduce\", 0.0),\n  (4L, \"b spark who\", 1.0),\n  (5L, \"g d a y\", 0.0),\n  (6L, \"spark fly\", 1.0),\n  (7L, \"was mapreduce\", 0.0),\n  (8L, \"e spark program\", 1.0),\n  (9L, \"a e c l\", 0.0),\n  (10L, \"spark compile\", 1.0),\n  (11L, \"hadoop software\", 0.0)\n)).toDF(\"id\", \"text\", \"label\")\n\n// Configure an ML pipeline, which consists of three stages: tokenizer, hashingTF, and lr.\nval tokenizer \u003d new Tokenizer()\n  .setInputCol(\"text\")\n  .setOutputCol(\"words\")\nval hashingTF \u003d new HashingTF()\n  .setInputCol(tokenizer.getOutputCol)\n  .setOutputCol(\"features\")\nval lr \u003d new LogisticRegression()\n  .setMaxIter(10)\nval pipeline \u003d new Pipeline()\n  .setStages(Array(tokenizer, hashingTF, lr))\n\n// We use a ParamGridBuilder to construct a grid of parameters to search over.\n// With 3 values for hashingTF.numFeatures and 2 values for lr.regParam,\n// this grid will have 3 x 2 \u003d 6 parameter settings for CrossValidator to choose from.\nval paramGrid \u003d new ParamGridBuilder()\n  .addGrid(hashingTF.numFeatures, Array(10, 100, 1000))\n  .addGrid(lr.regParam, Array(0.1, 0.01))\n  .build()\n\n// We now treat the Pipeline as an Estimator, wrapping it in a CrossValidator instance.\n// This will allow us to jointly choose parameters for all Pipeline stages.\n// A CrossValidator requires an Estimator, a set of Estimator ParamMaps, and an Evaluator.\n// Note that the evaluator here is a BinaryClassificationEvaluator and its default metric\n// is areaUnderROC.\nval cv \u003d new CrossValidator()\n  .setEstimator(pipeline)\n  .setEvaluator(new BinaryClassificationEvaluator)\n  .setEstimatorParamMaps(paramGrid)\n  .setNumFolds(2)  // Use 3+ in practice\n\n// Run cross-validation, and choose the best set of parameters.\nval cvModel \u003d cv.fit(training)\n\n// Prepare test documents, which are unlabeled (id, text) tuples.\nval test \u003d spark.createDataFrame(Seq(\n  (4L, \"spark i j k\"),\n  (5L, \"l m n\"),\n  (6L, \"mapreduce spark\"),\n  (7L, \"apache hadoop\")\n)).toDF(\"id\", \"text\")\n\n// Make predictions on test documents. cvModel uses the best model found (lrModel).\ncvModel.transform(test)\n  .select(\"id\", \"text\", \"probability\", \"prediction\")\n  .collect()\n  .foreach { case Row(id: Long, text: String, prob: Vector, prediction: Double) \u003d\u003e\n    println(s\"($id, $text) --\u003e prob\u003d$prob, prediction\u003d$prediction\")\n  }",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:33:25 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport org.apache.spark.ml.Pipeline\n\nimport org.apache.spark.ml.classification.LogisticRegression\n\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\n\nimport org.apache.spark.ml.feature.{HashingTF, Tokenizer}\n\nimport org.apache.spark.ml.linalg.Vector\n\nimport org.apache.spark.ml.tuning.{CrossValidator, ParamGridBuilder}\n\nimport org.apache.spark.sql.Row\n\ntraining: org.apache.spark.sql.DataFrame \u003d [id: bigint, text: string ... 1 more field]\n\ntokenizer: org.apache.spark.ml.feature.Tokenizer \u003d tok_2f5fb4845d66\n\nhashingTF: org.apache.spark.ml.feature.HashingTF \u003d hashingTF_f4fadc5cbafa\n\nlr: org.apache.spark.ml.classification.LogisticRegression \u003d logreg_bf0840970f0d\n\npipeline: org.apache.spark.ml.Pipeline \u003d pipeline_9ade58762e52\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparamGrid: Array[org.apache.spark.ml.param.ParamMap] \u003d\nArray({\n\thashingTF_f4fadc5cbafa-numFeatures: 10,\n\tlogreg_bf0840970f0d-regParam: 0.1\n}, {\n\thashingTF_f4fadc5cbafa-numFeatures: 100,\n\tlogreg_bf0840970f0d-regParam: 0.1\n}, {\n\thashingTF_f4fadc5cbafa-numFeatures: 1000,\n\tlogreg_bf0840970f0d-regParam: 0.1\n}, {\n\thashingTF_f4fadc5cbafa-numFeatures: 10,\n\tlogreg_bf0840970f0d-regParam: 0.01\n}, {\n\thashingTF_f4fadc5cbafa-numFeatures: 100,\n\tlogreg_bf0840970f0d-regParam: 0.01\n}, {\n\thashingTF_f4fadc5cbafa-numFeatures: 1000,\n\tlogreg_bf0840970f0d-regParam: 0.01\n})\n\ncv: org.apache.spark.ml.tuning.CrossValidator \u003d cv_760738b4050d\n\ncvModel: org.apache.spark.ml.tuning.CrossValidatorModel \u003d cv_760738b4050d\n\ntest: org.apache.spark.sql.DataFrame \u003d [id: bigint, text: string]\n(4, spark i j k) --\u003e prob\u003d[0.12566260711357483,0.8743373928864251], prediction\u003d1.0\n(5, l m n) --\u003e prob\u003d[0.995215441016286,0.004784558983713995], prediction\u003d0.0\n(6, mapreduce spark) --\u003e prob\u003d[0.3069689523262669,0.693031047673733], prediction\u003d1.0\n(7, apache hadoop) --\u003e prob\u003d[0.8040279442401453,0.19597205575985466], prediction\u003d0.0\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492402691605_-1680037188",
      "id": "20170417-001811_1010372068",
      "dateCreated": "Apr 17, 2017 12:18:11 AM",
      "dateStarted": "Apr 17, 2017 12:33:25 AM",
      "dateFinished": "Apr 17, 2017 12:33:40 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.ml.Pipeline\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.ml.feature.VectorIndexer\nimport org.apache.spark.ml.regression.{GBTRegressionModel, GBTRegressor}\n\nval featureIndexer \u003d new VectorIndexer()\n  .setInputCol(\"features\")\n  .setOutputCol(\"indexedFeatures\")\n  .setMaxCategories(4)\n  .fit(dfUnion)\n\n// Train a GBT model.\nval gbt \u003d new GBTRegressor()\n  .setLabelCol(\"FG%\")                                                                                                      \n  .setFeaturesCol(\"indexedFeatures\")    \n  .setMaxIter(10)\n\n// Chain indexer and GBT in a Pipeline.\nval pipeline \u003d new Pipeline()\n  .setStages(Array(featureIndexer, gbt))\n\n// Train model. This also runs the indexer.\nval model \u003d pipeline.fit(trainingData)\n\n// Make predictions.\nval predictions \u003d model.transform(testData)\n\n// Select example rows to display.\npredictions.select(\"prediction\", \"FG%\", \"features\").show(5)\n\n// Select (prediction, true label) and compute test error.\nval evaluator \u003d new RegressionEvaluator()\n  .setLabelCol(\"label\")\n  .setPredictionCol(\"prediction\")\n  .setMetricName(\"rmse\")\nval rmse \u003d evaluator.evaluate(predictions)\nprintln(\"Root Mean Squared Error (RMSE) on test data \u003d \" + rmse)\n\nval gbtModel \u003d model.stages(1).asInstanceOf[GBTRegressionModel]\nprintln(\"Learned regression GBT model:\\n\" + gbtModel.toDebugString)",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:48:57 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\nimport org.apache.spark.ml.Pipeline\n\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\n\nimport org.apache.spark.ml.feature.VectorIndexer\n\nimport org.apache.spark.ml.regression.{GBTRegressionModel, GBTRegressor}\n\nfeatureIndexer: org.apache.spark.ml.feature.VectorIndexerModel \u003d vecIdx_f8e1459ff6ee\n\ngbt: org.apache.spark.ml.regression.GBTRegressor \u003d gbtr_52d6ceb5393c\n\npipeline: org.apache.spark.ml.Pipeline \u003d pipeline_3bbf5793ec99\n\nmodel: org.apache.spark.ml.PipelineModel \u003d pipeline_3bbf5793ec99\n\npredictions: org.apache.spark.sql.DataFrame \u003d [features: vector, shot_made_numeric: int ... 5 more fields]\n+------------------+----+--------------------+\n|        prediction| FG%|            features|\n+------------------+----+--------------------+\n|0.5950636218620442| 0.4|(64,[0,21,27,31],...|\n|0.6681837345593814|0.25|(64,[0,21,27,32],...|\n|0.6944585433449137|0.67|(64,[0,21,27,33],...|\n|0.6944585433449137|0.33|(64,[0,21,27,33],...|\n|0.6681837345593814|0.67|(64,[0,21,27,37],...|\n+------------------+----+--------------------+\nonly showing top 5 rows\n\n\nevaluator: org.apache.spark.ml.evaluation.RegressionEvaluator \u003d regEval_899f24a73ac5\n\n\n\n\n\n\n\n\n\njava.lang.IllegalArgumentException: Field \"label\" does not exist.\n  at org.apache.spark.sql.types.StructType$$anonfun$apply$1.apply(StructType.scala:264)\n  at org.apache.spark.sql.types.StructType$$anonfun$apply$1.apply(StructType.scala:264)\n  at scala.collection.MapLike$class.getOrElse(MapLike.scala:128)\n  at scala.collection.AbstractMap.getOrElse(Map.scala:59)\n  at org.apache.spark.sql.types.StructType.apply(StructType.scala:263)\n  at org.apache.spark.ml.util.SchemaUtils$.checkNumericType(SchemaUtils.scala:71)\n  at org.apache.spark.ml.evaluation.RegressionEvaluator.evaluate(RegressionEvaluator.scala:78)\n  ... 54 elided\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492403605376_-1858426049",
      "id": "20170417-003325_1905914137",
      "dateCreated": "Apr 17, 2017 12:33:25 AM",
      "dateStarted": "Apr 17, 2017 12:48:57 AM",
      "dateFinished": "Apr 17, 2017 12:51:44 AM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n// Select example rows to display.\npredictions.select(\"prediction\", \"FG%\", \"features\").show(20)\n\n// Select (prediction, true label) and compute test error.\nval evaluator \u003d new RegressionEvaluator()\n  .setLabelCol(\"FG%\")\n  .setPredictionCol(\"prediction\")\n  .setMetricName(\"rmse\")\nval rmse \u003d evaluator.evaluate(predictions)\nprintln(\"Root Mean Squared Error (RMSE) on test data \u003d \" + rmse)\n\nval gbtModel \u003d model.stages(1).asInstanceOf[GBTRegressionModel]\nprintln(\"Learned regression GBT model:\\n\" + gbtModel.toDebugString)",
      "user": "anonymous",
      "dateUpdated": "Apr 17, 2017 12:53:05 AM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------------------+----+--------------------+\n|        prediction| FG%|            features|\n+------------------+----+--------------------+\n|0.5950636218620442| 0.4|(64,[0,21,27,31],...|\n|0.6681837345593814|0.25|(64,[0,21,27,32],...|\n|0.6944585433449137|0.67|(64,[0,21,27,33],...|\n|0.6944585433449137|0.33|(64,[0,21,27,33],...|\n|0.6681837345593814|0.67|(64,[0,21,27,37],...|\n|0.6681837345593814| 0.5|(64,[0,21,27,42],...|\n|0.6681837345593814|0.67|(64,[0,21,27,47],...|\n|0.5950636218620442|0.71|(64,[0,21,26,31],...|\n|0.6681837345593814| 0.5|(64,[0,21,26,35],...|\n|0.6681837345593814| 0.5|(64,[0,21,26,45],...|\n| 0.810227640315882| 1.0|(64,[0,21,26,48],...|\n|0.6105647391890046| 1.0|(64,[0,22,27,31],...|\n|0.6724848518863418| 1.0|(64,[0,22,27,47],...|\n|0.7905647391890045| 1.0|(64,[0,22,26,31],...|\n|0.6724848518863418| 1.0|(64,[0,22,26,37],...|\n|0.6724848518863418| 1.0|(64,[0,22,26,42],...|\n|0.6724848518863418| 1.0|(64,[0,23,27,32],...|\n|0.9964654344106136| 1.0|(64,[0,23,27,41],...|\n|0.8333964784161979| 1.0|(64,[0,23,27,53],...|\n|0.6451247391890045| 0.5|(64,[0,23,26,31],...|\n+------------------+----+--------------------+\nonly showing top 20 rows\n\n\nevaluator: org.apache.spark.ml.evaluation.RegressionEvaluator \u003d regEval_c901b34904b9\n\nrmse: Double \u003d 0.4116763314360439\nRoot Mean Squared Error (RMSE) on test data \u003d 0.4116763314360439\n\ngbtModel: org.apache.spark.ml.regression.GBTRegressionModel \u003d GBTRegressionModel (uid\u003dgbtr_52d6ceb5393c) with 10 trees\nLearned regression GBT model:\nGBTRegressionModel (uid\u003dgbtr_52d6ceb5393c) with 10 trees\n  Tree 0 (weight 1.0):\n    If (feature 28 in {1.0})\n     If (feature 19 in {1.0})\n      If (feature 23 in {0.0})\n       If (feature 21 in {1.0})\n        If (feature 26 in {0.0})\n         Predict: 0.0\n        Else (feature 26 not in {0.0})\n         Predict: 0.33\n       Else (feature 21 not in {1.0})\n        If (feature 26 in {1.0})\n         Predict: 0.0\n        Else (feature 26 not in {1.0})\n         Predict: 0.5\n      Else (feature 23 not in {0.0})\n       Predict: 0.71\n     Else (feature 19 not in {1.0})\n      If (feature 14 in {1.0})\n       If (feature 22 in {1.0})\n        Predict: 0.0\n       Else (feature 22 not in {1.0})\n        If (feature 21 in {1.0})\n         Predict: 0.3333333333333333\n        Else (feature 21 not in {1.0})\n         Predict: 0.5\n      Else (feature 14 not in {1.0})\n       If (feature 13 in {1.0})\n        If (feature 24 in {1.0})\n         Predict: 0.0\n        Else (feature 24 not in {1.0})\n         Predict: 0.4716666666666667\n       Else (feature 13 not in {1.0})\n        If (feature 8 in {1.0})\n         Predict: 0.4\n        Else (feature 8 not in {1.0})\n         Predict: 0.5389285714285714\n    Else (feature 28 not in {1.0})\n     If (feature 41 in {0.0})\n      If (feature 34 in {1.0})\n       If (feature 14 in {1.0})\n        If (feature 21 in {1.0})\n         Predict: 0.0\n        Else (feature 21 not in {1.0})\n         Predict: 0.5\n       Else (feature 14 not in {1.0})\n        If (feature 23 in {0.0})\n         Predict: 0.5422727272727272\n        Else (feature 23 not in {0.0})\n         Predict: 0.8174999999999999\n      Else (feature 34 not in {1.0})\n       If (feature 51 in {0.0})\n        If (feature 60 in {1.0})\n         Predict: 0.0\n        Else (feature 60 not in {1.0})\n         Predict: 0.6760194174757281\n       Else (feature 51 not in {0.0})\n        Predict: 1.0\n     Else (feature 41 not in {0.0})\n      Predict: 1.0\n  Tree 1 (weight 0.1):\n    If (feature 33 in {1.0})\n     If (feature 24 in {0.0})\n      If (feature 0 in {0.0})\n       If (feature 26 in {1.0})\n        If (feature 21 in {1.0})\n         Predict: -0.9520388349514562\n        Else (feature 21 not in {1.0})\n         Predict: -0.3520388349514563\n       Else (feature 26 not in {1.0})\n        If (feature 21 in {0.0})\n         Predict: -0.35203883495145627\n        Else (feature 21 not in {0.0})\n         Predict: -0.21203883495145637\n      Else (feature 0 not in {0.0})\n       If (feature 21 in {0.0})\n        Predict: -0.35203883495145627\n       Else (feature 21 not in {0.0})\n        Predict: 0.6479611650485437\n     Else (feature 24 not in {0.0})\n      If (feature 0 in {1.0})\n       Predict: 0.14796116504854373\n      Else (feature 0 not in {1.0})\n       Predict: 0.6479611650485437\n    Else (feature 33 not in {1.0})\n     If (feature 31 in {1.0})\n      If (feature 25 in {0.0})\n       If (feature 22 in {0.0})\n        If (feature 23 in {0.0})\n         Predict: -0.4142610571736785\n        Else (feature 23 not in {0.0})\n         Predict: -0.16003883495145638\n       Else (feature 22 not in {0.0})\n        If (feature 26 in {0.0})\n         Predict: -0.35203883495145627\n        Else (feature 26 not in {0.0})\n         Predict: 0.6479611650485437\n      Else (feature 25 not in {0.0})\n       Predict: 0.6479611650485437\n     Else (feature 31 not in {1.0})\n      If (feature 48 in {0.0})\n       If (feature 24 in {0.0})\n        If (feature 49 in {0.0})\n         Predict: -0.012154844425446058\n        Else (feature 49 not in {0.0})\n         Predict: 0.6479611650485437\n       Else (feature 24 not in {0.0})\n        If (feature 3 in {0.0})\n         Predict: 0.06531387167309502\n        Else (feature 3 not in {0.0})\n         Predict: 0.6850520110957006\n      Else (feature 48 not in {0.0})\n       If (feature 23 in {1.0})\n        If (feature 26 in {0.0})\n         Predict: -0.35203883495145627\n        Else (feature 26 not in {0.0})\n         Predict: 0.6479611650485437\n       Else (feature 23 not in {1.0})\n        Predict: 0.6479611650485437\n  Tree 2 (weight 0.1):\n    If (feature 55 in {0.0})\n     If (feature 56 in {0.0})\n      If (feature 53 in {0.0})\n       If (feature 33 in {1.0})\n        If (feature 24 in {0.0})\n         Predict: -0.2546310679611651\n        Else (feature 24 not in {0.0})\n         Predict: 0.318368932038835\n       Else (feature 33 not in {1.0})\n        If (feature 44 in {1.0})\n         Predict: -0.21117750698628365\n        Else (feature 44 not in {1.0})\n         Predict: 0.004043524614075744\n      Else (feature 53 not in {0.0})\n       If (feature 24 in {1.0})\n        Predict: 0.6348983907139247\n       Else (feature 24 not in {1.0})\n        Predict: 0.6503921339336329\n     Else (feature 56 not in {0.0})\n      Predict: 0.6503921339336329\n    Else (feature 55 not in {0.0})\n     Predict: 0.6503921339336329\n  Tree 3 (weight 0.1):\n    If (feature 46 in {1.0})\n     If (feature 23 in {0.0})\n      If (feature 19 in {0.0})\n       If (feature 21 in {1.0})\n        Predict: -1.3504165709891822\n       Else (feature 21 not in {1.0})\n        If (feature 17 in {1.0})\n         Predict: -0.3659103142088904\n        Else (feature 17 not in {1.0})\n         Predict: -0.3504165709891822\n      Else (feature 19 not in {0.0})\n       If (feature 21 in {1.0})\n        Predict: -0.3504165709891822\n       Else (feature 21 not in {1.0})\n        Predict: 0.6340896857911096\n     Else (feature 23 not in {0.0})\n      If (feature 0 in {0.0})\n       Predict: 0.6495834290108178\n      Else (feature 0 not in {0.0})\n       Predict: 0.6495834290108178\n    Else (feature 46 not in {1.0})\n     If (feature 31 in {1.0})\n      If (feature 25 in {0.0})\n       If (feature 22 in {0.0})\n        If (feature 23 in {0.0})\n         Predict: -0.332217550661758\n        Else (feature 23 not in {0.0})\n         Predict: -0.12883977288398024\n       Else (feature 22 not in {0.0})\n        If (feature 26 in {0.0})\n         Predict: -0.28243977288398026\n        Else (feature 26 not in {0.0})\n         Predict: 0.5175602271160198\n      Else (feature 25 not in {0.0})\n       Predict: 0.5175602271160198\n     Else (feature 31 not in {1.0})\n      If (feature 24 in {0.0})\n       If (feature 33 in {1.0})\n        If (feature 0 in {0.0})\n         Predict: -0.2832762829403606\n        Else (feature 0 not in {0.0})\n         Predict: -0.14181596548004316\n       Else (feature 33 not in {1.0})\n        If (feature 48 in {0.0})\n         Predict: -0.0031226364366173263\n        Else (feature 48 not in {0.0})\n         Predict: 0.2889887985445912\n      Else (feature 24 not in {0.0})\n       If (feature 3 in {0.0})\n        If (feature 18 in {0.0})\n         Predict: 0.05011839670170462\n        Else (feature 18 not in {0.0})\n         Predict: 0.9082713778854234\n       Else (feature 3 not in {0.0})\n        If (feature 26 in {0.0})\n         Predict: 0.44723290395374526\n        Else (feature 26 not in {0.0})\n         Predict: 0.6472329039537452\n  Tree 4 (weight 0.1):\n    If (feature 55 in {0.0})\n     If (feature 56 in {0.0})\n      If (feature 49 in {0.0})\n       If (feature 53 in {0.0})\n        If (feature 36 in {0.0})\n         Predict: -0.010306934373998685\n        Else (feature 36 not in {0.0})\n         Predict: 0.18665857554065107\n       Else (feature 53 not in {0.0})\n        If (feature 24 in {1.0})\n         Predict: 0.49789503323079876\n        Else (feature 24 not in {1.0})\n         Predict: 0.5209382344342299\n      Else (feature 49 not in {0.0})\n       Predict: 0.5181847544033433\n     Else (feature 56 not in {0.0})\n      If (feature 21 in {0.0})\n       Predict: 0.5209382344342299\n      Else (feature 21 not in {0.0})\n       Predict: 0.5209382344342299\n    Else (feature 55 not in {0.0})\n     If (feature 0 in {0.0})\n      Predict: 0.5209382344342299\n     Else (feature 0 not in {0.0})\n      Predict: 0.5209382344342299\n  Tree 5 (weight 0.1):\n    If (feature 8 in {0.0})\n     If (feature 59 in {0.0})\n      If (feature 63 in {0.0})\n       If (feature 62 in {0.0})\n        If (feature 7 in {1.0})\n         Predict: -0.11634409337580069\n        Else (feature 7 not in {1.0})\n         Predict: -8.272799511915599E-5\n       Else (feature 62 not in {0.0})\n        Predict: 0.6522693431729412\n      Else (feature 63 not in {0.0})\n       Predict: 0.6522693431729412\n     Else (feature 59 not in {0.0})\n      Predict: 0.6522693431729412\n    Else (feature 8 not in {0.0})\n     If (feature 26 in {1.0})\n      If (feature 24 in {0.0})\n       If (feature 28 in {1.0})\n        Predict: -0.7956918218756028\n       Else (feature 28 not in {1.0})\n        If (feature 23 in {0.0})\n         Predict: -0.21398396662405794\n        Else (feature 23 not in {0.0})\n         Predict: 0.6522693431729412\n      Else (feature 24 not in {0.0})\n       Predict: 0.8936207737315702\n     Else (feature 26 not in {1.0})\n      If (feature 34 in {1.0})\n       If (feature 23 in {0.0})\n        Predict: -0.10637922626842977\n       Else (feature 23 not in {0.0})\n        Predict: 0.36930817812439765\n      Else (feature 34 not in {1.0})\n       If (feature 28 in {1.0})\n        If (feature 21 in {0.0})\n         Predict: 0.17816622827702466\n        Else (feature 21 not in {0.0})\n         Predict: 0.20430817812439717\n       Else (feature 28 not in {1.0})\n        If (feature 21 in {0.0})\n         Predict: 0.6261273933255684\n        Else (feature 21 not in {0.0})\n         Predict: 0.6522693431729412\n  Tree 6 (weight 0.1):\n    If (feature 44 in {1.0})\n     If (feature 7 in {1.0})\n      Predict: -1.2814176318318269\n     Else (feature 7 not in {1.0})\n      If (feature 21 in {0.0})\n       If (feature 24 in {1.0})\n        Predict: -0.33081185475533603\n       Else (feature 24 not in {1.0})\n        If (feature 14 in {1.0})\n         Predict: -0.3046699049079633\n        Else (feature 14 not in {1.0})\n         Predict: 0.028663428425370025\n      Else (feature 21 not in {0.0})\n       Predict: 0.6953300950920367\n    Else (feature 44 not in {1.0})\n     If (feature 24 in {0.0})\n      If (feature 43 in {1.0})\n       If (feature 21 in {0.0})\n        If (feature 2 in {0.0})\n         Predict: -0.6810474445613685\n        Else (feature 2 not in {0.0})\n         Predict: 0.6522858887719649\n       Else (feature 21 not in {0.0})\n        Predict: 0.6522858887719649\n      Else (feature 43 not in {1.0})\n       If (feature 18 in {1.0})\n        If (feature 28 in {0.0})\n         Predict: -0.3577141112280351\n        Else (feature 28 not in {0.0})\n         Predict: -0.07353241913372166\n       Else (feature 18 not in {1.0})\n        If (feature 52 in {1.0})\n         Predict: -0.3477141112280351\n        Else (feature 52 not in {1.0})\n         Predict: 0.005085087211099963\n     Else (feature 24 not in {0.0})\n      If (feature 3 in {0.0})\n       If (feature 31 in {1.0})\n        If (feature 26 in {0.0})\n         Predict: -0.314807219166694\n        Else (feature 26 not in {0.0})\n         Predict: -0.20147388583336073\n       Else (feature 31 not in {1.0})\n        If (feature 18 in {0.0})\n         Predict: 0.05119846006807309\n        Else (feature 18 not in {0.0})\n         Predict: 0.7286950347821621\n      Else (feature 3 not in {0.0})\n       If (feature 26 in {0.0})\n        If (feature 28 in {1.0})\n         Predict: 0.29695510168397665\n        Else (feature 28 not in {1.0})\n         Predict: 0.42277340958966314\n       Else (feature 26 not in {0.0})\n        If (feature 28 in {0.0})\n         Predict: 0.3827734095896631\n        Else (feature 28 not in {0.0})\n         Predict: 0.6569551016839765\n  Tree 7 (weight 0.1):\n    If (feature 46 in {1.0})\n     If (feature 23 in {0.0})\n      If (feature 12 in {1.0})\n       If (feature 21 in {1.0})\n        Predict: -1.079272341759742\n       Else (feature 21 not in {1.0})\n        Predict: -0.279272341759742\n      Else (feature 12 not in {1.0})\n       If (feature 19 in {0.0})\n        If (feature 7 in {0.0})\n         Predict: -0.29008117633332264\n        Else (feature 7 not in {0.0})\n         Predict: -0.2560200686836056\n       Else (feature 19 not in {0.0})\n        If (feature 21 in {1.0})\n         Predict: -0.279272341759742\n        Else (feature 21 not in {1.0})\n         Predict: 0.4991099890930968\n     Else (feature 23 not in {0.0})\n      Predict: 0.5207276582402578\n    Else (feature 46 not in {1.0})\n     If (feature 12 in {0.0})\n      If (feature 48 in {0.0})\n       If (feature 55 in {0.0})\n        If (feature 56 in {0.0})\n         Predict: -0.007388230671101086\n        Else (feature 56 not in {0.0})\n         Predict: 0.41575011570418785\n       Else (feature 55 not in {0.0})\n        If (feature 0 in {1.0})\n         Predict: 0.41575011570418785\n        Else (feature 0 not in {1.0})\n         Predict: 0.43900238878032427\n      Else (feature 48 not in {0.0})\n       If (feature 23 in {1.0})\n        If (feature 26 in {0.0})\n         Predict: -0.3391766175612949\n        Else (feature 26 not in {0.0})\n         Predict: 0.46082338243870513\n       Else (feature 23 not in {1.0})\n        Predict: 0.46082338243870513\n     Else (feature 12 not in {0.0})\n      If (feature 22 in {0.0})\n       If (feature 50 in {0.0})\n        If (feature 21 in {1.0})\n         Predict: -0.27105845183252963\n        Else (feature 21 not in {1.0})\n         Predict: 0.08949208173554077\n       Else (feature 50 not in {0.0})\n        Predict: 0.651268871329745\n      Else (feature 22 not in {0.0})\n       If (feature 28 in {1.0})\n        If (feature 26 in {0.0})\n         Predict: -0.0745494365759416\n        Else (feature 26 not in {0.0})\n         Predict: 0.5854505634240583\n       Else (feature 28 not in {1.0})\n        Predict: 0.651268871329745\n  Tree 8 (weight 0.1):\n    If (feature 49 in {0.0})\n     If (feature 53 in {0.0})\n      If (feature 36 in {0.0})\n       If (feature 8 in {0.0})\n        If (feature 2 in {0.0})\n         Predict: -0.014294725332368268\n        Else (feature 2 not in {0.0})\n         Predict: 0.08877605883479145\n       Else (feature 8 not in {0.0})\n        If (feature 26 in {1.0})\n         Predict: -0.012941190128750073\n        Else (feature 26 not in {1.0})\n         Predict: 0.2240224608512496\n      Else (feature 36 not in {0.0})\n       If (feature 24 in {0.0})\n        Predict: 0.11335341548103516\n       Else (feature 24 not in {0.0})\n        Predict: 0.5779887910622679\n     Else (feature 53 not in {0.0})\n      If (feature 24 in {1.0})\n       Predict: 0.3895705263042686\n      Else (feature 24 not in {1.0})\n       Predict: 0.41722776183840815\n    Else (feature 49 not in {0.0})\n     If (feature 9 in {0.0})\n      Predict: 0.41502497781369874\n     Else (feature 9 not in {0.0})\n      Predict: 0.41502497781369874\n  Tree 9 (weight 0.1):\n    If (feature 43 in {1.0})\n     If (feature 15 in {1.0})\n      Predict: -1.2071680311150674\n     Else (feature 15 not in {1.0})\n      If (feature 17 in {1.0})\n       Predict: -1.2071680311150674\n      Else (feature 17 not in {1.0})\n       If (feature 2 in {0.0})\n        If (feature 21 in {0.0})\n         Predict: -0.1962466732071743\n        Else (feature 21 not in {0.0})\n         Predict: 0.5261653022182657\n       Else (feature 2 not in {0.0})\n        If (feature 23 in {1.0})\n         Predict: 0.5055511453848338\n        Else (feature 23 not in {1.0})\n         Predict: 0.5996266812782396\n    Else (feature 43 not in {1.0})\n     If (feature 21 in {1.0})\n      If (feature 38 in {0.0})\n       If (feature 16 in {0.0})\n        If (feature 1 in {1.0})\n         Predict: -0.32338016146368886\n        Else (feature 1 not in {1.0})\n         Predict: -0.04013534175399158\n       Else (feature 16 not in {0.0})\n        Predict: 0.9297871546247514\n      Else (feature 38 not in {0.0})\n       If (feature 8 in {1.0})\n        Predict: 0.4774716110601034\n       Else (feature 8 not in {1.0})\n        Predict: 0.6556054625304388\n     Else (feature 21 not in {1.0})\n      If (feature 40 in {0.0})\n       If (feature 12 in {0.0})\n        If (feature 58 in {0.0})\n         Predict: 0.002875831515612407\n        Else (feature 58 not in {0.0})\n         Predict: 0.6556054625304388\n       Else (feature 12 not in {0.0})\n        If (feature 28 in {1.0})\n         Predict: -0.0695558040835174\n        Else (feature 28 not in {1.0})\n         Predict: 0.4128566663197345\n      Else (feature 40 not in {0.0})\n       If (feature 1 in {1.0})\n        Predict: -0.34439453746956117\n       Else (feature 1 not in {1.0})\n        If (feature 7 in {1.0})\n         Predict: -0.32114226439342475\n        Else (feature 7 not in {1.0})\n         Predict: 0.6462756656550722\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1492404046649_607654058",
      "id": "20170417-004046_918403663",
      "dateCreated": "Apr 17, 2017 12:40:46 AM",
      "dateStarted": "Apr 17, 2017 12:53:05 AM",
      "dateFinished": "Apr 17, 2017 12:53:27 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1492404785837_-1469391837",
      "id": "20170417-005305_1807774593",
      "dateCreated": "Apr 17, 2017 12:53:05 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "data ingestion and ml",
  "id": "2CEMNAS9H",
  "angularObjects": {
    "2CDZFXCUT:shared_process": [],
    "2CCY7MY3T:shared_process": [],
    "2CB5RVYTJ:shared_process": [],
    "2CC34JGPG:shared_process": [],
    "2CDS74WDM:shared_process": [],
    "2CDFN7YHB:shared_process": [],
    "2CBGT1PMV:shared_process": [],
    "2CEFB6624:shared_process": [],
    "2CC73BX8J:shared_process": [],
    "2CBKBEFKJ:shared_process": [],
    "2CCB8ZE38:shared_process": [],
    "2CC2VRT2Y:shared_process": [],
    "2CD33B8XG:shared_process": [],
    "2CEJ9G1VP:shared_process": [],
    "2CAJZAMXF:shared_process": [],
    "2CDK5DWG7:shared_process": [],
    "2CDZ9NRX1:shared_process": [],
    "2CDH6VVGE:shared_process": [],
    "2CDNN8HYD:shared_process": []
  },
  "config": {
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}